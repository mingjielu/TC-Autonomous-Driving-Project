WARNING:__main__:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/mmopenlab/mmcv/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
projects.mmdet3d_plugin
projects.mmdet3d_plugin
projects.mmdet3d_plugin
projects.mmdet3d_plugin
projects.mmdet3d_plugin
projects.mmdet3d_plugin
projects.mmdet3d_plugin
projects.mmdet3d_plugin
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
2025-04-22 09:36:57,946 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.19 | packaged by conda-forge | (main, Mar 20 2024, 12:50:21) [GCC 12.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: AMD Radeon Graphics
CUDA_HOME: /opt/rocm
NVCC: Not Available
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.1+gitcfc225a
PyTorch compiling details: PyTorch built with:
  - GCC 9.4
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.0-Product Build 20211112 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - HIP Runtime 6.2.41134
  - MIOpen 3.2.0
  - Magma 2.7.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/opt/cache/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=1 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=OFF, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=ON, 

TorchVision: 0.14.0a0+befa256
OpenCV: 4.8.1
MMCV: 1.7.1
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 60241134
MMDetection: 2.26.0
MMSegmentation: 0.25.0
MMDetection3D: 1.0.0rc4+dd161b2
spconv2.0: False
------------------------------------------------------------

/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
/bin/sh: 1: /opt/rocm/hip/bin/hipcc: not found
2025-04-22 09:36:59,835 - mmdet - INFO - Distributed training: True
2025-04-22 09:37:01,122 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:01,261 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,261 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,262 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,262 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,263 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,263 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,264 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,265 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,269 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,273 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,277 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,281 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,285 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,289 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,293 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,297 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,301 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,304 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,308 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,312 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,316 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,320 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,324 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,325 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:01,328 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,332 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,336 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,340 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,344 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,348 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,352 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,366 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,381 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,396 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,437 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:01,476 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,477 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,477 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,478 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,479 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,479 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,480 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,481 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,485 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,489 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,493 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,497 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,501 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,505 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,509 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,514 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,518 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,522 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,526 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,530 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,534 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,537 - mmdet - INFO - Config:
point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesE2EDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=False,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=True)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadMultiViewImageFromFilesInCeph',
        to_float32=True,
        file_client_args=dict(backend='disk'),
        img_root='data/nuscenes/'),
    dict(type='PhotoMetricDistortionMultiViewImage'),
    dict(
        type='LoadAnnotations3D_E2E',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False,
        with_future_anns=True,
        with_ins_inds_3d=True,
        ins_inds_add_1=True),
    dict(
        type='GenerateOccFlowLabels',
        grid_conf=dict(
            xbound=[-50.0, 50.0, 0.5],
            ybound=[-50.0, 50.0, 0.5],
            zbound=[-10.0, 10.0, 20.0]),
        ignore_index=255,
        only_vehicle=True,
        filter_invisible=False),
    dict(
        type='ObjectRangeFilterTrack',
        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
    dict(
        type='ObjectNameFilterTrack',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='CustomCollect3D',
        keys=[
            'gt_bboxes_3d', 'gt_labels_3d', 'gt_inds', 'img', 'timestamp',
            'l2g_r_mat', 'l2g_t', 'gt_fut_traj', 'gt_fut_traj_mask',
            'gt_past_traj', 'gt_past_traj_mask', 'gt_sdc_bbox', 'gt_sdc_label',
            'gt_sdc_fut_traj', 'gt_sdc_fut_traj_mask', 'gt_lane_labels',
            'gt_lane_bboxes', 'gt_lane_masks', 'gt_segmentation',
            'gt_instance', 'gt_centerness', 'gt_offset', 'gt_flow',
            'gt_backward_flow', 'gt_occ_has_invalid_frame',
            'gt_occ_img_is_valid', 'gt_future_boxes', 'gt_future_labels',
            'sdc_planning', 'sdc_planning_mask', 'command'
        ])
]
test_pipeline = [
    dict(
        type='LoadMultiViewImageFromFilesInCeph',
        to_float32=True,
        file_client_args=dict(backend='disk'),
        img_root='data/nuscenes/'),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='LoadAnnotations3D_E2E',
        with_bbox_3d=False,
        with_label_3d=False,
        with_attr_label=False,
        with_future_anns=True,
        with_ins_inds_3d=False,
        ins_inds_add_1=True),
    dict(
        type='GenerateOccFlowLabels',
        grid_conf=dict(
            xbound=[-50.0, 50.0, 0.5],
            ybound=[-50.0, 50.0, 0.5],
            zbound=[-10.0, 10.0, 20.0]),
        ignore_index=255,
        only_vehicle=True,
        filter_invisible=False),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1600, 900),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='CustomCollect3D',
                keys=[
                    'img', 'timestamp', 'l2g_r_mat', 'l2g_t', 'gt_lane_labels',
                    'gt_lane_bboxes', 'gt_lane_masks', 'gt_segmentation',
                    'gt_instance', 'gt_centerness', 'gt_offset', 'gt_flow',
                    'gt_backward_flow', 'gt_occ_has_invalid_frame',
                    'gt_occ_img_is_valid', 'sdc_planning', 'sdc_planning_mask',
                    'command'
                ])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=10,
        file_client_args=dict(backend='disk')),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=8,
    train=dict(
        type='NuScenesE2EDataset',
        data_root='data/nuscenes/',
        ann_file='data/infos/nuscenes_infos_temporal_train.pkl',
        pipeline=[
            dict(
                type='LoadMultiViewImageFromFilesInCeph',
                to_float32=True,
                file_client_args=dict(backend='disk'),
                img_root='data/nuscenes/'),
            dict(type='PhotoMetricDistortionMultiViewImage'),
            dict(
                type='LoadAnnotations3D_E2E',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False,
                with_future_anns=True,
                with_ins_inds_3d=True,
                ins_inds_add_1=True),
            dict(
                type='GenerateOccFlowLabels',
                grid_conf=dict(
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    zbound=[-10.0, 10.0, 20.0]),
                ignore_index=255,
                only_vehicle=True,
                filter_invisible=False),
            dict(
                type='ObjectRangeFilterTrack',
                point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
            dict(
                type='ObjectNameFilterTrack',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='CustomCollect3D',
                keys=[
                    'gt_bboxes_3d', 'gt_labels_3d', 'gt_inds', 'img',
                    'timestamp', 'l2g_r_mat', 'l2g_t', 'gt_fut_traj',
                    'gt_fut_traj_mask', 'gt_past_traj', 'gt_past_traj_mask',
                    'gt_sdc_bbox', 'gt_sdc_label', 'gt_sdc_fut_traj',
                    'gt_sdc_fut_traj_mask', 'gt_lane_labels', 'gt_lane_bboxes',
                    'gt_lane_masks', 'gt_segmentation', 'gt_instance',
                    'gt_centerness', 'gt_offset', 'gt_flow',
                    'gt_backward_flow', 'gt_occ_has_invalid_frame',
                    'gt_occ_img_is_valid', 'gt_future_boxes',
                    'gt_future_labels', 'sdc_planning', 'sdc_planning_mask',
                    'command'
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=False,
        box_type_3d='LiDAR',
        file_client_args=dict(backend='disk'),
        use_valid_flag=True,
        patch_size=[102.4, 102.4],
        canvas_size=(200, 200),
        bev_size=(200, 200),
        queue_length=5,
        predict_steps=12,
        past_steps=4,
        fut_steps=4,
        use_nonlinear_optimizer=True,
        occ_receptive_field=3,
        occ_n_future=6,
        occ_filter_invalid_sample=False),
    val=dict(
        type='NuScenesE2EDataset',
        data_root='data/nuscenes/',
        ann_file='data/infos/nuscenes_infos_temporal_val.pkl',
        pipeline=[
            dict(
                type='LoadMultiViewImageFromFilesInCeph',
                to_float32=True,
                file_client_args=dict(backend='disk'),
                img_root='data/nuscenes/'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='LoadAnnotations3D_E2E',
                with_bbox_3d=False,
                with_label_3d=False,
                with_attr_label=False,
                with_future_anns=True,
                with_ins_inds_3d=False,
                ins_inds_add_1=True),
            dict(
                type='GenerateOccFlowLabels',
                grid_conf=dict(
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    zbound=[-10.0, 10.0, 20.0]),
                ignore_index=255,
                only_vehicle=True,
                filter_invisible=False),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1600, 900),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='CustomCollect3D',
                        keys=[
                            'img', 'timestamp', 'l2g_r_mat', 'l2g_t',
                            'gt_lane_labels', 'gt_lane_bboxes',
                            'gt_lane_masks', 'gt_segmentation', 'gt_instance',
                            'gt_centerness', 'gt_offset', 'gt_flow',
                            'gt_backward_flow', 'gt_occ_has_invalid_frame',
                            'gt_occ_img_is_valid', 'sdc_planning',
                            'sdc_planning_mask', 'command'
                        ])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=True,
        box_type_3d='LiDAR',
        file_client_args=dict(backend='disk'),
        patch_size=[102.4, 102.4],
        canvas_size=(200, 200),
        bev_size=(200, 200),
        predict_steps=12,
        past_steps=4,
        fut_steps=4,
        use_nonlinear_optimizer=True,
        samples_per_gpu=1,
        eval_mod=['det', 'track', 'map'],
        occ_receptive_field=3,
        occ_n_future=6,
        occ_filter_invalid_sample=False),
    test=dict(
        type='NuScenesE2EDataset',
        data_root='data/nuscenes/',
        ann_file='data/infos/nuscenes_infos_temporal_val.pkl',
        pipeline=[
            dict(
                type='LoadMultiViewImageFromFilesInCeph',
                to_float32=True,
                file_client_args=dict(backend='disk'),
                img_root='data/nuscenes/'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='LoadAnnotations3D_E2E',
                with_bbox_3d=False,
                with_label_3d=False,
                with_attr_label=False,
                with_future_anns=True,
                with_ins_inds_3d=False,
                ins_inds_add_1=True),
            dict(
                type='GenerateOccFlowLabels',
                grid_conf=dict(
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    zbound=[-10.0, 10.0, 20.0]),
                ignore_index=255,
                only_vehicle=True,
                filter_invisible=False),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1600, 900),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='CustomCollect3D',
                        keys=[
                            'img', 'timestamp', 'l2g_r_mat', 'l2g_t',
                            'gt_lane_labels', 'gt_lane_bboxes',
                            'gt_lane_masks', 'gt_segmentation', 'gt_instance',
                            'gt_centerness', 'gt_offset', 'gt_flow',
                            'gt_backward_flow', 'gt_occ_has_invalid_frame',
                            'gt_occ_img_is_valid', 'sdc_planning',
                            'sdc_planning_mask', 'command'
                        ])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=True,
        box_type_3d='LiDAR',
        file_client_args=dict(backend='disk'),
        patch_size=[102.4, 102.4],
        canvas_size=(200, 200),
        bev_size=(200, 200),
        predict_steps=12,
        past_steps=4,
        fut_steps=4,
        occ_n_future=6,
        use_nonlinear_optimizer=True,
        eval_mod=['det', 'map', 'track']),
    shuffler_sampler=dict(type='DistributedGroupSampler'),
    nonshuffler_sampler=dict(type='DistributedSampler'))
evaluation = dict(
    interval=6,
    pipeline=[
        dict(
            type='LoadMultiViewImageFromFilesInCeph',
            to_float32=True,
            file_client_args=dict(backend='disk'),
            img_root='data/nuscenes/'),
        dict(
            type='NormalizeMultiviewImage',
            mean=[103.53, 116.28, 123.675],
            std=[1.0, 1.0, 1.0],
            to_rgb=False),
        dict(type='PadMultiViewImage', size_divisor=32),
        dict(
            type='LoadAnnotations3D_E2E',
            with_bbox_3d=False,
            with_label_3d=False,
            with_attr_label=False,
            with_future_anns=True,
            with_ins_inds_3d=False,
            ins_inds_add_1=True),
        dict(
            type='GenerateOccFlowLabels',
            grid_conf=dict(
                xbound=[-50.0, 50.0, 0.5],
                ybound=[-50.0, 50.0, 0.5],
                zbound=[-10.0, 10.0, 20.0]),
            ignore_index=255,
            only_vehicle=True,
            filter_invisible=False),
        dict(
            type='MultiScaleFlipAug3D',
            img_scale=(1600, 900),
            pts_scale_ratio=1,
            flip=False,
            transforms=[
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ],
                    with_label=False),
                dict(
                    type='CustomCollect3D',
                    keys=[
                        'img', 'timestamp', 'l2g_r_mat', 'l2g_t',
                        'gt_lane_labels', 'gt_lane_bboxes', 'gt_lane_masks',
                        'gt_segmentation', 'gt_instance', 'gt_centerness',
                        'gt_offset', 'gt_flow', 'gt_backward_flow',
                        'gt_occ_has_invalid_frame', 'gt_occ_img_is_valid',
                        'sdc_planning', 'sdc_planning_mask', 'command'
                    ])
            ])
    ],
    planning_evaluation_strategy='uniad')
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=10,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './projects/work_dirs/stage1_track_map/base_track_map/'
load_from = 'ckpts/bevformer_r101_dcn_24ep.pth'
resume_from = None
workflow = [('train', 1)]
plugin = True
plugin_dir = 'projects/mmdet3d_plugin/'
voxel_size = [0.2, 0.2, 8]
patch_size = [102.4, 102.4]
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
_dim_ = 256
_pos_dim_ = 128
_ffn_dim_ = 512
_num_levels_ = 4
bev_h_ = 200
bev_w_ = 200
_feed_dim_ = 512
_dim_half_ = 128
canvas_size = (200, 200)
queue_length = 5
predict_steps = 12
predict_modes = 6
fut_steps = 4
past_steps = 4
use_nonlinear_optimizer = True
occ_n_future = 4
occ_n_future_plan = 6
occ_n_future_max = 6
planning_steps = 6
use_col_optim = True
planning_evaluation_strategy = 'uniad'
occflow_grid_conf = dict(
    xbound=[-50.0, 50.0, 0.5],
    ybound=[-50.0, 50.0, 0.5],
    zbound=[-10.0, 10.0, 20.0])
train_gt_iou_threshold = 0.3
model = dict(
    type='UniAD',
    gt_iou_threshold=0.3,
    queue_length=5,
    use_grid_mask=True,
    video_test_mode=True,
    num_query=900,
    num_classes=10,
    pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
    img_backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(1, 2, 3),
        frozen_stages=4,
        norm_cfg=dict(type='BN2d', requires_grad=False),
        norm_eval=True,
        style='caffe',
        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),
        stage_with_dcn=(False, False, True, True)),
    img_neck=dict(
        type='FPN',
        in_channels=[512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_output',
        num_outs=4,
        relu_before_extra_convs=True),
    freeze_img_backbone=True,
    freeze_img_neck=False,
    freeze_bn=False,
    score_thresh=0.4,
    filter_score_thresh=0.35,
    qim_args=dict(
        qim_type='QIMBase',
        merger_dropout=0,
        update_query_pos=True,
        fp_ratio=0.3,
        random_drop=0.1),
    mem_args=dict(
        memory_bank_type='MemoryBank',
        memory_bank_score_thresh=0.0,
        memory_bank_len=4),
    loss_cfg=dict(
        type='ClipMatcher',
        num_classes=10,
        weight_dict=None,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        assigner=dict(
            type='HungarianAssigner3DTrack',
            cls_cost=dict(type='FocalLossCost', weight=2.0),
            reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_past_traj_weight=0.0),
    pts_bbox_head=dict(
        type='BEVFormerTrackHead',
        bev_h=200,
        bev_w=200,
        num_query=900,
        num_classes=10,
        in_channels=256,
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        past_steps=4,
        fut_steps=4,
        transformer=dict(
            type='PerceptionTransformer',
            rotate_prev_bev=True,
            use_shift=True,
            use_can_bus=True,
            embed_dims=256,
            encoder=dict(
                type='BEVFormerEncoder',
                num_layers=6,
                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
                num_points_in_pillar=4,
                return_intermediate=False,
                transformerlayers=dict(
                    type='BEVFormerLayer',
                    attn_cfgs=[
                        dict(
                            type='TemporalSelfAttention',
                            embed_dims=256,
                            num_levels=1),
                        dict(
                            type='SpatialCrossAttention',
                            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
                            deformable_attention=dict(
                                type='MSDeformableAttention3D',
                                embed_dims=256,
                                num_points=8,
                                num_levels=4),
                            embed_dims=256)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm'))),
            decoder=dict(
                type='DetectionTransformerDecoder',
                num_layers=6,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='CustomMSDeformableAttention',
                            embed_dims=256,
                            num_levels=1)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        bbox_coder=dict(
            type='NMSFreeCoder',
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
            max_num=300,
            voxel_size=[0.2, 0.2, 8],
            num_classes=10),
        positional_encoding=dict(
            type='LearnedPositionalEncoding',
            num_feats=128,
            row_num_embed=200,
            col_num_embed=200),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0.0)),
    seg_head=dict(
        type='PansegformerHead',
        bev_h=200,
        bev_w=200,
        canvas_size=(200, 200),
        pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
        num_query=300,
        num_classes=4,
        num_things_classes=3,
        num_stuff_classes=1,
        in_channels=2048,
        sync_cls_avg_factor=True,
        as_two_stage=False,
        with_box_refine=True,
        transformer=dict(
            type='SegDeformableTransformer',
            encoder=dict(
                type='DetrTransformerEncoder',
                num_layers=6,
                transformerlayers=dict(
                    type='BaseTransformerLayer',
                    attn_cfgs=dict(
                        type='MultiScaleDeformableAttention',
                        embed_dims=256,
                        num_levels=4),
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),
            decoder=dict(
                type='DeformableDetrTransformerDecoder',
                num_layers=6,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='MultiScaleDeformableAttention',
                            embed_dims=256,
                            num_levels=4)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=5.0),
        loss_iou=dict(type='GIoULoss', loss_weight=2.0),
        loss_mask=dict(type='DiceLoss', loss_weight=2.0),
        thing_transformer_head=dict(
            type='SegMaskHead', d_model=256, nhead=8, num_decoder_layers=4),
        stuff_transformer_head=dict(
            type='SegMaskHead',
            d_model=256,
            nhead=8,
            num_decoder_layers=6,
            self_attn=True),
        train_cfg=dict(
            assigner=dict(
                type='HungarianAssigner',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(
                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),
                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0)),
            assigner_with_mask=dict(
                type='HungarianAssigner_multi_info',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(
                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),
                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0),
                mask_cost=dict(type='DiceCost', weight=2.0)),
            sampler=dict(type='PseudoSampler'),
            sampler_with_mask=dict(type='PseudoSampler_segformer'))),
    train_cfg=dict(
        pts=dict(
            grid_size=[512, 512, 1],
            voxel_size=[0.2, 0.2, 8],
            point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
            out_size_factor=4,
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0.0),
                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]))))
info_root = 'data/infos/'
ann_file_train = 'data/infos/nuscenes_infos_temporal_train.pkl'
ann_file_val = 'data/infos/nuscenes_infos_temporal_val.pkl'
ann_file_test = 'data/infos/nuscenes_infos_temporal_val.pkl'
optimizer = dict(
    type='AdamW',
    lr=0.0002,
    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),
    weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    min_lr_ratio=0.001)
total_epochs = 6
runner = dict(type='EpochBasedRunner', max_epochs=6)
find_unused_parameters = True
gpu_ids = range(0, 8)

2025-04-22 09:37:01,537 - mmdet - INFO - Set random seed to 0, deterministic: True
2025-04-22 09:37:01,538 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,542 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,546 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,550 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,554 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,558 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,562 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,566 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,570 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,586 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,602 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,616 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,620 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:01,655 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:01,766 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,766 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,767 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,768 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,768 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,769 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,769 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,770 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,775 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,779 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,783 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,787 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,791 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,795 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,800 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,804 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,808 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,812 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,816 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,820 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,825 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,829 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,833 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,837 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,841 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,846 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,850 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,855 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,859 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,864 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,884 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,903 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,921 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:01,975 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:02,271 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:02,443 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,444 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,444 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,445 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,446 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,447 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,447 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,449 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,455 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,460 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,464 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,469 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,475 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,479 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,483 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,488 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,492 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,497 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,501 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,505 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,510 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,515 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,520 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,524 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,529 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,534 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,539 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,544 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,548 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,553 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,555 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:02,574 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,576 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:02,592 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,610 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,631 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:02,664 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:02,746 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,747 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,748 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,748 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,749 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,750 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,751 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,753 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,760 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,765 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,767 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,768 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,768 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,769 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,770 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,770 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,771 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,772 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,773 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,775 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,779 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,781 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,784 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,785 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,789 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,791 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,794 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,796 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,800 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,803 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,806 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,809 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,811 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,815 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,818 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,820 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,823 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,826 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,828 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,833 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,834 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,835 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,836 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,837 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,838 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,838 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,838 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,839 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,839 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,840 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,841 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,844 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,844 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,847 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,850 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,850 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,852 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,854 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,856 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,859 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,860 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,861 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,864 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,865 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,867 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,870 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,871 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,873 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,875 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,876 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,879 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,880 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,882 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,886 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,887 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,891 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,893 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,896 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,902 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,905 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,907 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,914 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,919 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,920 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,924 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,930 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,930 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,935 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,940 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,943 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,945 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,950 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,950 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,956 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,962 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,964 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:02,966 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-04-22 09:37:02,988 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,010 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,011 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:03,029 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:03,033 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,093 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.code_weights - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.positional_encoding.row_embed.weight - torch.Size([200, 128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.positional_encoding.col_embed.weight - torch.Size([200, 128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.cams_embeds - torch.Size([6, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight - torch.Size([64, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.deformable_attention.sampling_offsets.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.deformable_attention.sampling_offsets.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.deformable_attention.attention_weights.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.deformable_attention.attention_weights.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.deformable_attention.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.deformable_attention.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,133 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight - torch.Size([64, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.deformable_attention.sampling_offsets.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.deformable_attention.sampling_offsets.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.deformable_attention.attention_weights.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.deformable_attention.attention_weights.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.deformable_attention.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.deformable_attention.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight - torch.Size([64, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.deformable_attention.sampling_offsets.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.deformable_attention.sampling_offsets.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.deformable_attention.attention_weights.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.deformable_attention.attention_weights.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.deformable_attention.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.deformable_attention.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,134 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight - torch.Size([64, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.deformable_attention.sampling_offsets.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.deformable_attention.sampling_offsets.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.deformable_attention.attention_weights.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.deformable_attention.attention_weights.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.deformable_attention.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.deformable_attention.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight - torch.Size([64, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.deformable_attention.sampling_offsets.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.deformable_attention.sampling_offsets.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.deformable_attention.attention_weights.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.deformable_attention.attention_weights.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.deformable_attention.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.deformable_attention.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,135 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight - torch.Size([64, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.deformable_attention.sampling_offsets.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.deformable_attention.sampling_offsets.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.deformable_attention.attention_weights.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.deformable_attention.attention_weights.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.deformable_attention.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.deformable_attention.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.encoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,136 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,137 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,137 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,138 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,139 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.can_bus_mlp.0.weight - torch.Size([128, 18]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.can_bus_mlp.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.can_bus_mlp.2.weight - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.can_bus_mlp.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.can_bus_mlp.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.transformer.can_bus_mlp.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.0.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,140 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.1.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.2.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.3.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,141 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.4.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.cls_branches.5.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in BEVFormerTrackHead  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,142 - mmcv - INFO - 
pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.0.4.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.0.4.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.1.4.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.1.4.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.2.4.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.2.4.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.3.4.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.3.4.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.4.4.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.4.4.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.5.4.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.past_traj_reg_branches.5.4.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
pts_bbox_head.bev_embedding.weight - torch.Size([40000, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,143 - mmcv - INFO - 
img_backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,144 - mmcv - INFO - 
img_backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,145 - mmcv - INFO - 
img_backbone.layer3.2.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,146 - mmcv - INFO - 
img_backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.7.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.12.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,147 - mmcv - INFO - 
img_backbone.layer3.12.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.12.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,148 - mmcv - INFO - 
img_backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,149 - mmcv - INFO - 
img_backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,150 - mmcv - INFO - 
img_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
img_neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_embedding.weight - torch.Size([901, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
reference_points.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
reference_points.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.self_attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.self_attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.self_attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.self_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear1.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_pos1.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_pos1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_pos2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_pos2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm_pos.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm_pos.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_feat1.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_feat1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_feat2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.linear_feat2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm_feat.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm_feat.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
query_interact.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.save_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.save_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_fc1.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_fc1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_fc2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
memory_bank.temporal_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,151 - mmcv - INFO - 
seg_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,152 - mmcv - INFO - 
seg_head.transformer.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,153 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,154 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,155 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.reference_points.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.transformer.reference_points.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.bev_embedding.weight - torch.Size([40000, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.0.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.0.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.1.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.1.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.2.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.2.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.3.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.3.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.4.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.4.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.5.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.cls_branches.5.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.reg_branches.0.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,156 - mmcv - INFO - 
seg_head.reg_branches.0.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.1.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.1.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.2.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.2.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.3.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.3.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.4.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.4.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.5.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches.5.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.query_embedding.weight - torch.Size([300, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.stuff_query.weight - torch.Size([1, 512]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.0.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.0.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.1.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.1.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.2.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.2.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,157 - mmcv - INFO - 
seg_head.reg_branches2.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.reg_branches2.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.reg_branches2.3.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.reg_branches2.3.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.0.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.0.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.1.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.1.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.2.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.2.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.3.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_thing_branches.3.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.0.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.1.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.2.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.3.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.3.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.4.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.4.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.5.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.cls_stuff_branches.5.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PansegformerHead  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.0.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,158 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.1.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.2.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.blocks.3.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,159 - mmcv - INFO - 
seg_head.things_mask_head.attnen.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.things_mask_head.attnen.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.self_attention.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.self_attention.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.self_attention.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.self_attention.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.0.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,160 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.self_attention.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.self_attention.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.self_attention.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.self_attention.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.1.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.self_attention.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.self_attention.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.self_attention.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.self_attention.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.2.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,161 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.self_attention.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.self_attention.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.self_attention.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.self_attention.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.3.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.self_attention.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.self_attention.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.self_attention.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.self_attention.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.4.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.head_norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.head_norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.v.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.v.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.attn.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.head_norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.head_norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.mlp.fc1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.mlp.fc1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.mlp.fc2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.mlp.fc2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.self_attention.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.self_attention.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,162 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.self_attention.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.self_attention.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.norm3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.blocks.5.norm3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.q.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.q.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.k.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.k.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.linear_l1.0.weight - torch.Size([8, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.linear_l1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.linear.0.weight - torch.Size([1, 8]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,163 - mmcv - INFO - 
seg_head.stuff_mask_head.attnen.linear.0.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of UniAD  
 
2025-04-22 09:37:03,165 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,170 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,175 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,176 - mmdet - INFO - Model:
UniAD(
  (pts_bbox_head): BEVFormerTrackHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): LearnedPositionalEncoding(num_feats=128, row_num_embed=200, col_num_embed=200)
    (transformer): PerceptionTransformer(
      (encoder): BEVFormerEncoder(
        (layers): ModuleList(
          (0): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (decoder): DetectionTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (can_bus_mlp): Sequential(
        (0): Linear(in_features=18, out_features=128, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=128, out_features=256, bias=True)
        (3): ReLU(inplace=True)
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (cls_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (past_traj_reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
    )
    (bev_embedding): Embedding(40000, 256)
  )
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
  (img_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (grid_mask): GridMask()
  (query_embedding): Embedding(901, 512)
  (reference_points): Linear(in_features=256, out_features=3, bias=True)
  (query_interact): QueryInteractionModule(
    (self_attn): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
    )
    (linear1): Linear(in_features=256, out_features=256, bias=True)
    (dropout): Dropout(p=0, inplace=False)
    (linear2): Linear(in_features=256, out_features=256, bias=True)
    (linear_pos1): Linear(in_features=256, out_features=256, bias=True)
    (linear_pos2): Linear(in_features=256, out_features=256, bias=True)
    (dropout_pos1): Dropout(p=0, inplace=False)
    (dropout_pos2): Dropout(p=0, inplace=False)
    (norm_pos): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (linear_feat1): Linear(in_features=256, out_features=256, bias=True)
    (linear_feat2): Linear(in_features=256, out_features=256, bias=True)
    (dropout_feat1): Dropout(p=0, inplace=False)
    (dropout_feat2): Dropout(p=0, inplace=False)
    (norm_feat): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (dropout1): Dropout(p=0, inplace=False)
    (dropout2): Dropout(p=0, inplace=False)
  )
  (memory_bank): MemoryBank(
    (save_proj): Linear(in_features=256, out_features=256, bias=True)
    (temporal_attn): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
    )
    (temporal_fc1): Linear(in_features=256, out_features=256, bias=True)
    (temporal_fc2): Linear(in_features=256, out_features=256, bias=True)
    (temporal_norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (temporal_norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
  (criterion): ClipMatcher(
    (loss_cls): FocalLoss()
    (loss_bboxes): L1Loss()
    (loss_predictions): SmoothL1Loss()
  )
  (seg_head): PansegformerHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): SegDeformableTransformer(
      (encoder): DetrTransformerEncoder(
        (layers): ModuleList(
          (0): BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (decoder): DeformableDetrTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (reference_points): Linear(in_features=256, out_features=2, bias=True)
    )
    (bev_embedding): Embedding(40000, 256)
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=3, bias=True)
      (1): Linear(in_features=256, out_features=3, bias=True)
      (2): Linear(in_features=256, out_features=3, bias=True)
      (3): Linear(in_features=256, out_features=3, bias=True)
      (4): Linear(in_features=256, out_features=3, bias=True)
      (5): Linear(in_features=256, out_features=3, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
    )
    (query_embedding): Embedding(300, 512)
    (stuff_query): Embedding(1, 512)
    (reg_branches2): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
    )
    (cls_thing_branches): ModuleList(
      (0): Linear(in_features=256, out_features=3, bias=True)
      (1): Linear(in_features=256, out_features=3, bias=True)
      (2): Linear(in_features=256, out_features=3, bias=True)
      (3): Linear(in_features=256, out_features=3, bias=True)
    )
    (cls_stuff_branches): ModuleList(
      (0): Linear(in_features=256, out_features=1, bias=True)
      (1): Linear(in_features=256, out_features=1, bias=True)
      (2): Linear(in_features=256, out_features=1, bias=True)
      (3): Linear(in_features=256, out_features=1, bias=True)
      (4): Linear(in_features=256, out_features=1, bias=True)
      (5): Linear(in_features=256, out_features=1, bias=True)
    )
    (loss_mask): DiceLoss()
    (things_mask_head): SegMaskHead(
      (blocks): ModuleList(
        (0): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
        )
        (1): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
        )
        (2): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
        )
        (3): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
        )
      )
      (attnen): AttentionTail(
        (q): Linear(in_features=256, out_features=256, bias=True)
        (k): Linear(in_features=256, out_features=256, bias=True)
        (linear_l1): Sequential(
          (0): Linear(in_features=8, out_features=8, bias=True)
          (1): ReLU()
        )
        (linear): Sequential(
          (0): Linear(in_features=8, out_features=1, bias=True)
          (1): ReLU()
        )
      )
    )
    (stuff_mask_head): SegMaskHead(
      (blocks): ModuleList(
        (0): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
        (1): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
        (2): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
        (3): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
        (4): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
        (5): Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
      )
      (attnen): AttentionTail(
        (q): Linear(in_features=256, out_features=256, bias=True)
        (k): Linear(in_features=256, out_features=256, bias=True)
        (linear_l1): Sequential(
          (0): Linear(in_features=8, out_features=8, bias=True)
          (1): ReLU()
        )
        (linear): Sequential(
          (0): Linear(in_features=8, out_features=1, bias=True)
          (1): ReLU()
        )
      )
    )
  )
)
2025-04-22 09:37:03,179 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,184 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,189 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,193 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,198 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,202 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,206 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,211 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,215 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,220 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,225 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,229 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,234 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,238 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,243 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,263 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,281 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,299 - mmcv - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-04-22 09:37:03,351 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 37.658 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 38.607 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 37.686 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 37.897 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 38.007 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 38.118 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 38.596 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 37.140 seconds.
======
Reverse indexing ...
Done reverse indexing in 6.3 seconds.
======
Done reverse indexing in 6.5 seconds.
======
Done reverse indexing in 7.3 seconds.
======
Done reverse indexing in 6.7 seconds.
======
Done reverse indexing in 7.3 seconds.
======
Done reverse indexing in 7.4 seconds.
======
Done reverse indexing in 6.9 seconds.
======
Done reverse indexing in 8.3 seconds.
======
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
======
Loading NuScenes tables for version v1.0-trainval...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 40.993 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 42.800 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 43.110 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 43.468 seconds.
======
Reverse indexing ...
Done reverse indexing in 8.2 seconds.
======
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 49.322 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 49.581 seconds.
======
Reverse indexing ...
Done reverse indexing in 7.8 seconds.
======
Done reverse indexing in 8.0 seconds.
======
Done reverse indexing in 7.7 seconds.
======
2025-04-22 09:38:57,775 - mmdet - INFO - load checkpoint from local path: ckpts/bevformer_r101_dcn_24ep.pth
2025-04-22 09:38:57,989 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.0.conv2 is upgraded to version 2.
2025-04-22 09:38:57,992 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.1.conv2 is upgraded to version 2.
2025-04-22 09:38:57,993 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.2.conv2 is upgraded to version 2.
2025-04-22 09:38:57,995 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.3.conv2 is upgraded to version 2.
2025-04-22 09:38:57,997 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.4.conv2 is upgraded to version 2.
2025-04-22 09:38:57,999 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.5.conv2 is upgraded to version 2.
2025-04-22 09:38:58,000 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.6.conv2 is upgraded to version 2.
2025-04-22 09:38:58,002 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.7.conv2 is upgraded to version 2.
2025-04-22 09:38:58,004 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.8.conv2 is upgraded to version 2.
2025-04-22 09:38:58,006 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.9.conv2 is upgraded to version 2.
2025-04-22 09:38:58,007 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.10.conv2 is upgraded to version 2.
2025-04-22 09:38:58,009 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.11.conv2 is upgraded to version 2.
2025-04-22 09:38:58,011 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.12.conv2 is upgraded to version 2.
2025-04-22 09:38:58,012 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.13.conv2 is upgraded to version 2.
2025-04-22 09:38:58,014 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.14.conv2 is upgraded to version 2.
2025-04-22 09:38:58,016 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.15.conv2 is upgraded to version 2.
2025-04-22 09:38:58,017 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.16.conv2 is upgraded to version 2.
2025-04-22 09:38:58,019 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.17.conv2 is upgraded to version 2.
2025-04-22 09:38:58,021 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.18.conv2 is upgraded to version 2.
2025-04-22 09:38:58,022 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.19.conv2 is upgraded to version 2.
2025-04-22 09:38:58,024 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.20.conv2 is upgraded to version 2.
2025-04-22 09:38:58,026 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.21.conv2 is upgraded to version 2.
2025-04-22 09:38:58,027 - root - INFO - ModulatedDeformConvPack img_backbone.layer3.22.conv2 is upgraded to version 2.
2025-04-22 09:38:58,029 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.0.conv2 is upgraded to version 2.
2025-04-22 09:38:58,032 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.1.conv2 is upgraded to version 2.
2025-04-22 09:38:58,033 - root - INFO - ModulatedDeformConvPack img_backbone.layer4.2.conv2 is upgraded to version 2.
2025-04-22 09:38:58,093 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: pts_bbox_head.query_embedding.weight, pts_bbox_head.transformer.reference_points.weight, pts_bbox_head.transformer.reference_points.bias

missing keys in source state_dict: pts_bbox_head.past_traj_reg_branches.0.0.weight, pts_bbox_head.past_traj_reg_branches.0.0.bias, pts_bbox_head.past_traj_reg_branches.0.2.weight, pts_bbox_head.past_traj_reg_branches.0.2.bias, pts_bbox_head.past_traj_reg_branches.0.4.weight, pts_bbox_head.past_traj_reg_branches.0.4.bias, pts_bbox_head.past_traj_reg_branches.1.0.weight, pts_bbox_head.past_traj_reg_branches.1.0.bias, pts_bbox_head.past_traj_reg_branches.1.2.weight, pts_bbox_head.past_traj_reg_branches.1.2.bias, pts_bbox_head.past_traj_reg_branches.1.4.weight, pts_bbox_head.past_traj_reg_branches.1.4.bias, pts_bbox_head.past_traj_reg_branches.2.0.weight, pts_bbox_head.past_traj_reg_branches.2.0.bias, pts_bbox_head.past_traj_reg_branches.2.2.weight, pts_bbox_head.past_traj_reg_branches.2.2.bias, pts_bbox_head.past_traj_reg_branches.2.4.weight, pts_bbox_head.past_traj_reg_branches.2.4.bias, pts_bbox_head.past_traj_reg_branches.3.0.weight, pts_bbox_head.past_traj_reg_branches.3.0.bias, pts_bbox_head.past_traj_reg_branches.3.2.weight, pts_bbox_head.past_traj_reg_branches.3.2.bias, pts_bbox_head.past_traj_reg_branches.3.4.weight, pts_bbox_head.past_traj_reg_branches.3.4.bias, pts_bbox_head.past_traj_reg_branches.4.0.weight, pts_bbox_head.past_traj_reg_branches.4.0.bias, pts_bbox_head.past_traj_reg_branches.4.2.weight, pts_bbox_head.past_traj_reg_branches.4.2.bias, pts_bbox_head.past_traj_reg_branches.4.4.weight, pts_bbox_head.past_traj_reg_branches.4.4.bias, pts_bbox_head.past_traj_reg_branches.5.0.weight, pts_bbox_head.past_traj_reg_branches.5.0.bias, pts_bbox_head.past_traj_reg_branches.5.2.weight, pts_bbox_head.past_traj_reg_branches.5.2.bias, pts_bbox_head.past_traj_reg_branches.5.4.weight, pts_bbox_head.past_traj_reg_branches.5.4.bias, query_embedding.weight, reference_points.weight, reference_points.bias, query_interact.self_attn.in_proj_weight, query_interact.self_attn.in_proj_bias, query_interact.self_attn.out_proj.weight, query_interact.self_attn.out_proj.bias, query_interact.linear1.weight, query_interact.linear1.bias, query_interact.linear2.weight, query_interact.linear2.bias, query_interact.linear_pos1.weight, query_interact.linear_pos1.bias, query_interact.linear_pos2.weight, query_interact.linear_pos2.bias, query_interact.norm_pos.weight, query_interact.norm_pos.bias, query_interact.linear_feat1.weight, query_interact.linear_feat1.bias, query_interact.linear_feat2.weight, query_interact.linear_feat2.bias, query_interact.norm_feat.weight, query_interact.norm_feat.bias, query_interact.norm1.weight, query_interact.norm1.bias, query_interact.norm2.weight, query_interact.norm2.bias, memory_bank.save_proj.weight, memory_bank.save_proj.bias, memory_bank.temporal_attn.in_proj_weight, memory_bank.temporal_attn.in_proj_bias, memory_bank.temporal_attn.out_proj.weight, memory_bank.temporal_attn.out_proj.bias, memory_bank.temporal_fc1.weight, memory_bank.temporal_fc1.bias, memory_bank.temporal_fc2.weight, memory_bank.temporal_fc2.bias, memory_bank.temporal_norm1.weight, memory_bank.temporal_norm1.bias, memory_bank.temporal_norm2.weight, memory_bank.temporal_norm2.bias, criterion.code_weights, seg_head.transformer.level_embeds, seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.0.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.0.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.0.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.0.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.0.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.0.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.0.norms.0.weight, seg_head.transformer.encoder.layers.0.norms.0.bias, seg_head.transformer.encoder.layers.0.norms.1.weight, seg_head.transformer.encoder.layers.0.norms.1.bias, seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.1.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.1.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.1.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.1.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.1.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.1.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.1.norms.0.weight, seg_head.transformer.encoder.layers.1.norms.0.bias, seg_head.transformer.encoder.layers.1.norms.1.weight, seg_head.transformer.encoder.layers.1.norms.1.bias, seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.2.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.2.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.2.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.2.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.2.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.2.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.2.norms.0.weight, seg_head.transformer.encoder.layers.2.norms.0.bias, seg_head.transformer.encoder.layers.2.norms.1.weight, seg_head.transformer.encoder.layers.2.norms.1.bias, seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.3.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.3.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.3.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.3.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.3.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.3.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.3.norms.0.weight, seg_head.transformer.encoder.layers.3.norms.0.bias, seg_head.transformer.encoder.layers.3.norms.1.weight, seg_head.transformer.encoder.layers.3.norms.1.bias, seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.4.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.4.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.4.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.4.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.4.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.4.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.4.norms.0.weight, seg_head.transformer.encoder.layers.4.norms.0.bias, seg_head.transformer.encoder.layers.4.norms.1.weight, seg_head.transformer.encoder.layers.4.norms.1.bias, seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.5.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.5.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.5.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.5.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.5.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.5.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.5.norms.0.weight, seg_head.transformer.encoder.layers.5.norms.0.bias, seg_head.transformer.encoder.layers.5.norms.1.weight, seg_head.transformer.encoder.layers.5.norms.1.bias, seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.0.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.0.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.0.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.0.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.0.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.0.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.0.norms.0.weight, seg_head.transformer.decoder.layers.0.norms.0.bias, seg_head.transformer.decoder.layers.0.norms.1.weight, seg_head.transformer.decoder.layers.0.norms.1.bias, seg_head.transformer.decoder.layers.0.norms.2.weight, seg_head.transformer.decoder.layers.0.norms.2.bias, seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.1.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.1.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.1.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.1.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.1.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.1.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.1.norms.0.weight, seg_head.transformer.decoder.layers.1.norms.0.bias, seg_head.transformer.decoder.layers.1.norms.1.weight, seg_head.transformer.decoder.layers.1.norms.1.bias, seg_head.transformer.decoder.layers.1.norms.2.weight, seg_head.transformer.decoder.layers.1.norms.2.bias, seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.2.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.2.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.2.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.2.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.2.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.2.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.2.norms.0.weight, seg_head.transformer.decoder.layers.2.norms.0.bias, seg_head.transformer.decoder.layers.2.norms.1.weight, seg_head.transformer.decoder.layers.2.norms.1.bias, seg_head.transformer.decoder.layers.2.norms.2.weight, seg_head.transformer.decoder.layers.2.norms.2.bias, seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.3.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.3.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.3.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.3.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.3.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.3.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.3.norms.0.weight, seg_head.transformer.decoder.layers.3.norms.0.bias, seg_head.transformer.decoder.layers.3.norms.1.weight, seg_head.transformer.decoder.layers.3.norms.1.bias, seg_head.transformer.decoder.layers.3.norms.2.weight, seg_head.transformer.decoder.layers.3.norms.2.bias, seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.4.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.4.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.4.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.4.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.4.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.4.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.4.norms.0.weight, seg_head.transformer.decoder.layers.4.norms.0.bias, seg_head.transformer.decoder.layers.4.norms.1.weight, seg_head.transformer.decoder.layers.4.norms.1.bias, seg_head.transformer.decoder.layers.4.norms.2.weight, seg_head.transformer.decoder.layers.4.norms.2.bias, seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.5.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.5.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.5.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.5.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.5.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.5.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.5.norms.0.weight, seg_head.transformer.decoder.layers.5.norms.0.bias, seg_head.transformer.decoder.layers.5.norms.1.weight, seg_head.transformer.decoder.layers.5.norms.1.bias, seg_head.transformer.decoder.layers.5.norms.2.weight, seg_head.transformer.decoder.layers.5.norms.2.bias, seg_head.transformer.reference_points.weight, seg_head.transformer.reference_points.bias, seg_head.bev_embedding.weight, seg_head.cls_branches.0.weight, seg_head.cls_branches.0.bias, seg_head.cls_branches.1.weight, seg_head.cls_branches.1.bias, seg_head.cls_branches.2.weight, seg_head.cls_branches.2.bias, seg_head.cls_branches.3.weight, seg_head.cls_branches.3.bias, seg_head.cls_branches.4.weight, seg_head.cls_branches.4.bias, seg_head.cls_branches.5.weight, seg_head.cls_branches.5.bias, seg_head.reg_branches.0.0.weight, seg_head.reg_branches.0.0.bias, seg_head.reg_branches.0.2.weight, seg_head.reg_branches.0.2.bias, seg_head.reg_branches.0.4.weight, seg_head.reg_branches.0.4.bias, seg_head.reg_branches.1.0.weight, seg_head.reg_branches.1.0.bias, seg_head.reg_branches.1.2.weight, seg_head.reg_branches.1.2.bias, seg_head.reg_branches.1.4.weight, seg_head.reg_branches.1.4.bias, seg_head.reg_branches.2.0.weight, seg_head.reg_branches.2.0.bias, seg_head.reg_branches.2.2.weight, seg_head.reg_branches.2.2.bias, seg_head.reg_branches.2.4.weight, seg_head.reg_branches.2.4.bias, seg_head.reg_branches.3.0.weight, seg_head.reg_branches.3.0.bias, seg_head.reg_branches.3.2.weight, seg_head.reg_branches.3.2.bias, seg_head.reg_branches.3.4.weight, seg_head.reg_branches.3.4.bias, seg_head.reg_branches.4.0.weight, seg_head.reg_branches.4.0.bias, seg_head.reg_branches.4.2.weight, seg_head.reg_branches.4.2.bias, seg_head.reg_branches.4.4.weight, seg_head.reg_branches.4.4.bias, seg_head.reg_branches.5.0.weight, seg_head.reg_branches.5.0.bias, seg_head.reg_branches.5.2.weight, seg_head.reg_branches.5.2.bias, seg_head.reg_branches.5.4.weight, seg_head.reg_branches.5.4.bias, seg_head.query_embedding.weight, seg_head.stuff_query.weight, seg_head.reg_branches2.0.0.weight, seg_head.reg_branches2.0.0.bias, seg_head.reg_branches2.0.2.weight, seg_head.reg_branches2.0.2.bias, seg_head.reg_branches2.0.4.weight, seg_head.reg_branches2.0.4.bias, seg_head.reg_branches2.1.0.weight, seg_head.reg_branches2.1.0.bias, seg_head.reg_branches2.1.2.weight, seg_head.reg_branches2.1.2.bias, seg_head.reg_branches2.1.4.weight, seg_head.reg_branches2.1.4.bias, seg_head.reg_branches2.2.0.weight, seg_head.reg_branches2.2.0.bias, seg_head.reg_branches2.2.2.weight, seg_head.reg_branches2.2.2.bias, seg_head.reg_branches2.2.4.weight, seg_head.reg_branches2.2.4.bias, seg_head.reg_branches2.3.0.weight, seg_head.reg_branches2.3.0.bias, seg_head.reg_branches2.3.2.weight, seg_head.reg_branches2.3.2.bias, seg_head.reg_branches2.3.4.weight, seg_head.reg_branches2.3.4.bias, seg_head.cls_thing_branches.0.weight, seg_head.cls_thing_branches.0.bias, seg_head.cls_thing_branches.1.weight, seg_head.cls_thing_branches.1.bias, seg_head.cls_thing_branches.2.weight, seg_head.cls_thing_branches.2.bias, seg_head.cls_thing_branches.3.weight, seg_head.cls_thing_branches.3.bias, seg_head.cls_stuff_branches.0.weight, seg_head.cls_stuff_branches.0.bias, seg_head.cls_stuff_branches.1.weight, seg_head.cls_stuff_branches.1.bias, seg_head.cls_stuff_branches.2.weight, seg_head.cls_stuff_branches.2.bias, seg_head.cls_stuff_branches.3.weight, seg_head.cls_stuff_branches.3.bias, seg_head.cls_stuff_branches.4.weight, seg_head.cls_stuff_branches.4.bias, seg_head.cls_stuff_branches.5.weight, seg_head.cls_stuff_branches.5.bias, seg_head.things_mask_head.blocks.0.head_norm1.weight, seg_head.things_mask_head.blocks.0.head_norm1.bias, seg_head.things_mask_head.blocks.0.attn.q.weight, seg_head.things_mask_head.blocks.0.attn.q.bias, seg_head.things_mask_head.blocks.0.attn.k.weight, seg_head.things_mask_head.blocks.0.attn.k.bias, seg_head.things_mask_head.blocks.0.attn.v.weight, seg_head.things_mask_head.blocks.0.attn.v.bias, seg_head.things_mask_head.blocks.0.attn.proj.weight, seg_head.things_mask_head.blocks.0.attn.proj.bias, seg_head.things_mask_head.blocks.0.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.0.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.0.attn.linear.0.weight, seg_head.things_mask_head.blocks.0.attn.linear.0.bias, seg_head.things_mask_head.blocks.0.head_norm2.weight, seg_head.things_mask_head.blocks.0.head_norm2.bias, seg_head.things_mask_head.blocks.0.mlp.fc1.weight, seg_head.things_mask_head.blocks.0.mlp.fc1.bias, seg_head.things_mask_head.blocks.0.mlp.fc2.weight, seg_head.things_mask_head.blocks.0.mlp.fc2.bias, seg_head.things_mask_head.blocks.1.head_norm1.weight, seg_head.things_mask_head.blocks.1.head_norm1.bias, seg_head.things_mask_head.blocks.1.attn.q.weight, seg_head.things_mask_head.blocks.1.attn.q.bias, seg_head.things_mask_head.blocks.1.attn.k.weight, seg_head.things_mask_head.blocks.1.attn.k.bias, seg_head.things_mask_head.blocks.1.attn.v.weight, seg_head.things_mask_head.blocks.1.attn.v.bias, seg_head.things_mask_head.blocks.1.attn.proj.weight, seg_head.things_mask_head.blocks.1.attn.proj.bias, seg_head.things_mask_head.blocks.1.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.1.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.1.attn.linear.0.weight, seg_head.things_mask_head.blocks.1.attn.linear.0.bias, seg_head.things_mask_head.blocks.1.head_norm2.weight, seg_head.things_mask_head.blocks.1.head_norm2.bias, seg_head.things_mask_head.blocks.1.mlp.fc1.weight, seg_head.things_mask_head.blocks.1.mlp.fc1.bias, seg_head.things_mask_head.blocks.1.mlp.fc2.weight, seg_head.things_mask_head.blocks.1.mlp.fc2.bias, seg_head.things_mask_head.blocks.2.head_norm1.weight, seg_head.things_mask_head.blocks.2.head_norm1.bias, seg_head.things_mask_head.blocks.2.attn.q.weight, seg_head.things_mask_head.blocks.2.attn.q.bias, seg_head.things_mask_head.blocks.2.attn.k.weight, seg_head.things_mask_head.blocks.2.attn.k.bias, seg_head.things_mask_head.blocks.2.attn.v.weight, seg_head.things_mask_head.blocks.2.attn.v.bias, seg_head.things_mask_head.blocks.2.attn.proj.weight, seg_head.things_mask_head.blocks.2.attn.proj.bias, seg_head.things_mask_head.blocks.2.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.2.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.2.attn.linear.0.weight, seg_head.things_mask_head.blocks.2.attn.linear.0.bias, seg_head.things_mask_head.blocks.2.head_norm2.weight, seg_head.things_mask_head.blocks.2.head_norm2.bias, seg_head.things_mask_head.blocks.2.mlp.fc1.weight, seg_head.things_mask_head.blocks.2.mlp.fc1.bias, seg_head.things_mask_head.blocks.2.mlp.fc2.weight, seg_head.things_mask_head.blocks.2.mlp.fc2.bias, seg_head.things_mask_head.blocks.3.head_norm1.weight, seg_head.things_mask_head.blocks.3.head_norm1.bias, seg_head.things_mask_head.blocks.3.attn.q.weight, seg_head.things_mask_head.blocks.3.attn.q.bias, seg_head.things_mask_head.blocks.3.attn.k.weight, seg_head.things_mask_head.blocks.3.attn.k.bias, seg_head.things_mask_head.blocks.3.attn.v.weight, seg_head.things_mask_head.blocks.3.attn.v.bias, seg_head.things_mask_head.blocks.3.attn.proj.weight, seg_head.things_mask_head.blocks.3.attn.proj.bias, seg_head.things_mask_head.blocks.3.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.3.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.3.attn.linear.0.weight, seg_head.things_mask_head.blocks.3.attn.linear.0.bias, seg_head.things_mask_head.blocks.3.head_norm2.weight, seg_head.things_mask_head.blocks.3.head_norm2.bias, seg_head.things_mask_head.blocks.3.mlp.fc1.weight, seg_head.things_mask_head.blocks.3.mlp.fc1.bias, seg_head.things_mask_head.blocks.3.mlp.fc2.weight, seg_head.things_mask_head.blocks.3.mlp.fc2.bias, seg_head.things_mask_head.attnen.q.weight, seg_head.things_mask_head.attnen.q.bias, seg_head.things_mask_head.attnen.k.weight, seg_head.things_mask_head.attnen.k.bias, seg_head.things_mask_head.attnen.linear_l1.0.weight, seg_head.things_mask_head.attnen.linear_l1.0.bias, seg_head.things_mask_head.attnen.linear.0.weight, seg_head.things_mask_head.attnen.linear.0.bias, seg_head.stuff_mask_head.blocks.0.head_norm1.weight, seg_head.stuff_mask_head.blocks.0.head_norm1.bias, seg_head.stuff_mask_head.blocks.0.attn.q.weight, seg_head.stuff_mask_head.blocks.0.attn.q.bias, seg_head.stuff_mask_head.blocks.0.attn.k.weight, seg_head.stuff_mask_head.blocks.0.attn.k.bias, seg_head.stuff_mask_head.blocks.0.attn.v.weight, seg_head.stuff_mask_head.blocks.0.attn.v.bias, seg_head.stuff_mask_head.blocks.0.attn.proj.weight, seg_head.stuff_mask_head.blocks.0.attn.proj.bias, seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.0.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.0.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.0.head_norm2.weight, seg_head.stuff_mask_head.blocks.0.head_norm2.bias, seg_head.stuff_mask_head.blocks.0.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.0.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.0.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.0.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.0.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.0.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.0.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.0.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.0.norm3.weight, seg_head.stuff_mask_head.blocks.0.norm3.bias, seg_head.stuff_mask_head.blocks.1.head_norm1.weight, seg_head.stuff_mask_head.blocks.1.head_norm1.bias, seg_head.stuff_mask_head.blocks.1.attn.q.weight, seg_head.stuff_mask_head.blocks.1.attn.q.bias, seg_head.stuff_mask_head.blocks.1.attn.k.weight, seg_head.stuff_mask_head.blocks.1.attn.k.bias, seg_head.stuff_mask_head.blocks.1.attn.v.weight, seg_head.stuff_mask_head.blocks.1.attn.v.bias, seg_head.stuff_mask_head.blocks.1.attn.proj.weight, seg_head.stuff_mask_head.blocks.1.attn.proj.bias, seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.1.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.1.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.1.head_norm2.weight, seg_head.stuff_mask_head.blocks.1.head_norm2.bias, seg_head.stuff_mask_head.blocks.1.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.1.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.1.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.1.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.1.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.1.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.1.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.1.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.1.norm3.weight, seg_head.stuff_mask_head.blocks.1.norm3.bias, seg_head.stuff_mask_head.blocks.2.head_norm1.weight, seg_head.stuff_mask_head.blocks.2.head_norm1.bias, seg_head.stuff_mask_head.blocks.2.attn.q.weight, seg_head.stuff_mask_head.blocks.2.attn.q.bias, seg_head.stuff_mask_head.blocks.2.attn.k.weight, seg_head.stuff_mask_head.blocks.2.attn.k.bias, seg_head.stuff_mask_head.blocks.2.attn.v.weight, seg_head.stuff_mask_head.blocks.2.attn.v.bias, seg_head.stuff_mask_head.blocks.2.attn.proj.weight, seg_head.stuff_mask_head.blocks.2.attn.proj.bias, seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.2.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.2.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.2.head_norm2.weight, seg_head.stuff_mask_head.blocks.2.head_norm2.bias, seg_head.stuff_mask_head.blocks.2.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.2.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.2.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.2.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.2.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.2.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.2.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.2.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.2.norm3.weight, seg_head.stuff_mask_head.blocks.2.norm3.bias, seg_head.stuff_mask_head.blocks.3.head_norm1.weight, seg_head.stuff_mask_head.blocks.3.head_norm1.bias, seg_head.stuff_mask_head.blocks.3.attn.q.weight, seg_head.stuff_mask_head.blocks.3.attn.q.bias, seg_head.stuff_mask_head.blocks.3.attn.k.weight, seg_head.stuff_mask_head.blocks.3.attn.k.bias, seg_head.stuff_mask_head.blocks.3.attn.v.weight, seg_head.stuff_mask_head.blocks.3.attn.v.bias, seg_head.stuff_mask_head.blocks.3.attn.proj.weight, seg_head.stuff_mask_head.blocks.3.attn.proj.bias, seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.3.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.3.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.3.head_norm2.weight, seg_head.stuff_mask_head.blocks.3.head_norm2.bias, seg_head.stuff_mask_head.blocks.3.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.3.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.3.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.3.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.3.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.3.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.3.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.3.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.3.norm3.weight, seg_head.stuff_mask_head.blocks.3.norm3.bias, seg_head.stuff_mask_head.blocks.4.head_norm1.weight, seg_head.stuff_mask_head.blocks.4.head_norm1.bias, seg_head.stuff_mask_head.blocks.4.attn.q.weight, seg_head.stuff_mask_head.blocks.4.attn.q.bias, seg_head.stuff_mask_head.blocks.4.attn.k.weight, seg_head.stuff_mask_head.blocks.4.attn.k.bias, seg_head.stuff_mask_head.blocks.4.attn.v.weight, seg_head.stuff_mask_head.blocks.4.attn.v.bias, seg_head.stuff_mask_head.blocks.4.attn.proj.weight, seg_head.stuff_mask_head.blocks.4.attn.proj.bias, seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.4.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.4.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.4.head_norm2.weight, seg_head.stuff_mask_head.blocks.4.head_norm2.bias, seg_head.stuff_mask_head.blocks.4.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.4.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.4.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.4.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.4.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.4.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.4.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.4.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.4.norm3.weight, seg_head.stuff_mask_head.blocks.4.norm3.bias, seg_head.stuff_mask_head.blocks.5.head_norm1.weight, seg_head.stuff_mask_head.blocks.5.head_norm1.bias, seg_head.stuff_mask_head.blocks.5.attn.q.weight, seg_head.stuff_mask_head.blocks.5.attn.q.bias, seg_head.stuff_mask_head.blocks.5.attn.k.weight, seg_head.stuff_mask_head.blocks.5.attn.k.bias, seg_head.stuff_mask_head.blocks.5.attn.v.weight, seg_head.stuff_mask_head.blocks.5.attn.v.bias, seg_head.stuff_mask_head.blocks.5.attn.proj.weight, seg_head.stuff_mask_head.blocks.5.attn.proj.bias, seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.5.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.5.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.5.head_norm2.weight, seg_head.stuff_mask_head.blocks.5.head_norm2.bias, seg_head.stuff_mask_head.blocks.5.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.5.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.5.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.5.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.5.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.5.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.5.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.5.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.5.norm3.weight, seg_head.stuff_mask_head.blocks.5.norm3.bias, seg_head.stuff_mask_head.attnen.q.weight, seg_head.stuff_mask_head.attnen.q.bias, seg_head.stuff_mask_head.attnen.k.weight, seg_head.stuff_mask_head.attnen.k.bias, seg_head.stuff_mask_head.attnen.linear_l1.0.weight, seg_head.stuff_mask_head.attnen.linear_l1.0.bias, seg_head.stuff_mask_head.attnen.linear.0.weight, seg_head.stuff_mask_head.attnen.linear.0.bias

2025-04-22 09:38:58,093 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: pts_bbox_head.query_embedding.weight, pts_bbox_head.transformer.reference_points.weight, pts_bbox_head.transformer.reference_points.bias

missing keys in source state_dict: pts_bbox_head.past_traj_reg_branches.0.0.weight, pts_bbox_head.past_traj_reg_branches.0.0.bias, pts_bbox_head.past_traj_reg_branches.0.2.weight, pts_bbox_head.past_traj_reg_branches.0.2.bias, pts_bbox_head.past_traj_reg_branches.0.4.weight, pts_bbox_head.past_traj_reg_branches.0.4.bias, pts_bbox_head.past_traj_reg_branches.1.0.weight, pts_bbox_head.past_traj_reg_branches.1.0.bias, pts_bbox_head.past_traj_reg_branches.1.2.weight, pts_bbox_head.past_traj_reg_branches.1.2.bias, pts_bbox_head.past_traj_reg_branches.1.4.weight, pts_bbox_head.past_traj_reg_branches.1.4.bias, pts_bbox_head.past_traj_reg_branches.2.0.weight, pts_bbox_head.past_traj_reg_branches.2.0.bias, pts_bbox_head.past_traj_reg_branches.2.2.weight, pts_bbox_head.past_traj_reg_branches.2.2.bias, pts_bbox_head.past_traj_reg_branches.2.4.weight, pts_bbox_head.past_traj_reg_branches.2.4.bias, pts_bbox_head.past_traj_reg_branches.3.0.weight, pts_bbox_head.past_traj_reg_branches.3.0.bias, pts_bbox_head.past_traj_reg_branches.3.2.weight, pts_bbox_head.past_traj_reg_branches.3.2.bias, pts_bbox_head.past_traj_reg_branches.3.4.weight, pts_bbox_head.past_traj_reg_branches.3.4.bias, pts_bbox_head.past_traj_reg_branches.4.0.weight, pts_bbox_head.past_traj_reg_branches.4.0.bias, pts_bbox_head.past_traj_reg_branches.4.2.weight, pts_bbox_head.past_traj_reg_branches.4.2.bias, pts_bbox_head.past_traj_reg_branches.4.4.weight, pts_bbox_head.past_traj_reg_branches.4.4.bias, pts_bbox_head.past_traj_reg_branches.5.0.weight, pts_bbox_head.past_traj_reg_branches.5.0.bias, pts_bbox_head.past_traj_reg_branches.5.2.weight, pts_bbox_head.past_traj_reg_branches.5.2.bias, pts_bbox_head.past_traj_reg_branches.5.4.weight, pts_bbox_head.past_traj_reg_branches.5.4.bias, query_embedding.weight, reference_points.weight, reference_points.bias, query_interact.self_attn.in_proj_weight, query_interact.self_attn.in_proj_bias, query_interact.self_attn.out_proj.weight, query_interact.self_attn.out_proj.bias, query_interact.linear1.weight, query_interact.linear1.bias, query_interact.linear2.weight, query_interact.linear2.bias, query_interact.linear_pos1.weight, query_interact.linear_pos1.bias, query_interact.linear_pos2.weight, query_interact.linear_pos2.bias, query_interact.norm_pos.weight, query_interact.norm_pos.bias, query_interact.linear_feat1.weight, query_interact.linear_feat1.bias, query_interact.linear_feat2.weight, query_interact.linear_feat2.bias, query_interact.norm_feat.weight, query_interact.norm_feat.bias, query_interact.norm1.weight, query_interact.norm1.bias, query_interact.norm2.weight, query_interact.norm2.bias, memory_bank.save_proj.weight, memory_bank.save_proj.bias, memory_bank.temporal_attn.in_proj_weight, memory_bank.temporal_attn.in_proj_bias, memory_bank.temporal_attn.out_proj.weight, memory_bank.temporal_attn.out_proj.bias, memory_bank.temporal_fc1.weight, memory_bank.temporal_fc1.bias, memory_bank.temporal_fc2.weight, memory_bank.temporal_fc2.bias, memory_bank.temporal_norm1.weight, memory_bank.temporal_norm1.bias, memory_bank.temporal_norm2.weight, memory_bank.temporal_norm2.bias, criterion.code_weights, seg_head.transformer.level_embeds, seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.0.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.0.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.0.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.0.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.0.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.0.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.0.norms.0.weight, seg_head.transformer.encoder.layers.0.norms.0.bias, seg_head.transformer.encoder.layers.0.norms.1.weight, seg_head.transformer.encoder.layers.0.norms.1.bias, seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.1.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.1.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.1.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.1.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.1.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.1.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.1.norms.0.weight, seg_head.transformer.encoder.layers.1.norms.0.bias, seg_head.transformer.encoder.layers.1.norms.1.weight, seg_head.transformer.encoder.layers.1.norms.1.bias, seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.2.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.2.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.2.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.2.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.2.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.2.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.2.norms.0.weight, seg_head.transformer.encoder.layers.2.norms.0.bias, seg_head.transformer.encoder.layers.2.norms.1.weight, seg_head.transformer.encoder.layers.2.norms.1.bias, seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.3.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.3.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.3.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.3.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.3.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.3.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.3.norms.0.weight, seg_head.transformer.encoder.layers.3.norms.0.bias, seg_head.transformer.encoder.layers.3.norms.1.weight, seg_head.transformer.encoder.layers.3.norms.1.bias, seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.4.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.4.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.4.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.4.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.4.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.4.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.4.norms.0.weight, seg_head.transformer.encoder.layers.4.norms.0.bias, seg_head.transformer.encoder.layers.4.norms.1.weight, seg_head.transformer.encoder.layers.4.norms.1.bias, seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.5.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.5.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.5.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.5.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.5.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.5.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.5.norms.0.weight, seg_head.transformer.encoder.layers.5.norms.0.bias, seg_head.transformer.encoder.layers.5.norms.1.weight, seg_head.transformer.encoder.layers.5.norms.1.bias, seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.0.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.0.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.0.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.0.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.0.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.0.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.0.norms.0.weight, seg_head.transformer.decoder.layers.0.norms.0.bias, seg_head.transformer.decoder.layers.0.norms.1.weight, seg_head.transformer.decoder.layers.0.norms.1.bias, seg_head.transformer.decoder.layers.0.norms.2.weight, seg_head.transformer.decoder.layers.0.norms.2.bias, seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.1.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.1.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.1.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.1.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.1.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.1.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.1.norms.0.weight, seg_head.transformer.decoder.layers.1.norms.0.bias, seg_head.transformer.decoder.layers.1.norms.1.weight, seg_head.transformer.decoder.layers.1.norms.1.bias, seg_head.transformer.decoder.layers.1.norms.2.weight, seg_head.transformer.decoder.layers.1.norms.2.bias, seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.2.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.2.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.2.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.2.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.2.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.2.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.2.norms.0.weight, seg_head.transformer.decoder.layers.2.norms.0.bias, seg_head.transformer.decoder.layers.2.norms.1.weight, seg_head.transformer.decoder.layers.2.norms.1.bias, seg_head.transformer.decoder.layers.2.norms.2.weight, seg_head.transformer.decoder.layers.2.norms.2.bias, seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.3.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.3.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.3.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.3.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.3.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.3.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.3.norms.0.weight, seg_head.transformer.decoder.layers.3.norms.0.bias, seg_head.transformer.decoder.layers.3.norms.1.weight, seg_head.transformer.decoder.layers.3.norms.1.bias, seg_head.transformer.decoder.layers.3.norms.2.weight, seg_head.transformer.decoder.layers.3.norms.2.bias, seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.4.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.4.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.4.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.4.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.4.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.4.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.4.norms.0.weight, seg_head.transformer.decoder.layers.4.norms.0.bias, seg_head.transformer.decoder.layers.4.norms.1.weight, seg_head.transformer.decoder.layers.4.norms.1.bias, seg_head.transformer.decoder.layers.4.norms.2.weight, seg_head.transformer.decoder.layers.4.norms.2.bias, seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.5.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.5.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.5.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.5.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.5.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.5.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.5.norms.0.weight, seg_head.transformer.decoder.layers.5.norms.0.bias, seg_head.transformer.decoder.layers.5.norms.1.weight, seg_head.transformer.decoder.layers.5.norms.1.bias, seg_head.transformer.decoder.layers.5.norms.2.weight, seg_head.transformer.decoder.layers.5.norms.2.bias, seg_head.transformer.reference_points.weight, seg_head.transformer.reference_points.bias, seg_head.bev_embedding.weight, seg_head.cls_branches.0.weight, seg_head.cls_branches.0.bias, seg_head.cls_branches.1.weight, seg_head.cls_branches.1.bias, seg_head.cls_branches.2.weight, seg_head.cls_branches.2.bias, seg_head.cls_branches.3.weight, seg_head.cls_branches.3.bias, seg_head.cls_branches.4.weight, seg_head.cls_branches.4.bias, seg_head.cls_branches.5.weight, seg_head.cls_branches.5.bias, seg_head.reg_branches.0.0.weight, seg_head.reg_branches.0.0.bias, seg_head.reg_branches.0.2.weight, seg_head.reg_branches.0.2.bias, seg_head.reg_branches.0.4.weight, seg_head.reg_branches.0.4.bias, seg_head.reg_branches.1.0.weight, seg_head.reg_branches.1.0.bias, seg_head.reg_branches.1.2.weight, seg_head.reg_branches.1.2.bias, seg_head.reg_branches.1.4.weight, seg_head.reg_branches.1.4.bias, seg_head.reg_branches.2.0.weight, seg_head.reg_branches.2.0.bias, seg_head.reg_branches.2.2.weight, seg_head.reg_branches.2.2.bias, seg_head.reg_branches.2.4.weight, seg_head.reg_branches.2.4.bias, seg_head.reg_branches.3.0.weight, seg_head.reg_branches.3.0.bias, seg_head.reg_branches.3.2.weight, seg_head.reg_branches.3.2.bias, seg_head.reg_branches.3.4.weight, seg_head.reg_branches.3.4.bias, seg_head.reg_branches.4.0.weight, seg_head.reg_branches.4.0.bias, seg_head.reg_branches.4.2.weight, seg_head.reg_branches.4.2.bias, seg_head.reg_branches.4.4.weight, seg_head.reg_branches.4.4.bias, seg_head.reg_branches.5.0.weight, seg_head.reg_branches.5.0.bias, seg_head.reg_branches.5.2.weight, seg_head.reg_branches.5.2.bias, seg_head.reg_branches.5.4.weight, seg_head.reg_branches.5.4.bias, seg_head.query_embedding.weight, seg_head.stuff_query.weight, seg_head.reg_branches2.0.0.weight, seg_head.reg_branches2.0.0.bias, seg_head.reg_branches2.0.2.weight, seg_head.reg_branches2.0.2.bias, seg_head.reg_branches2.0.4.weight, seg_head.reg_branches2.0.4.bias, seg_head.reg_branches2.1.0.weight, seg_head.reg_branches2.1.0.bias, seg_head.reg_branches2.1.2.weight, seg_head.reg_branches2.1.2.bias, seg_head.reg_branches2.1.4.weight, seg_head.reg_branches2.1.4.bias, seg_head.reg_branches2.2.0.weight, seg_head.reg_branches2.2.0.bias, seg_head.reg_branches2.2.2.weight, seg_head.reg_branches2.2.2.bias, seg_head.reg_branches2.2.4.weight, seg_head.reg_branches2.2.4.bias, seg_head.reg_branches2.3.0.weight, seg_head.reg_branches2.3.0.bias, seg_head.reg_branches2.3.2.weight, seg_head.reg_branches2.3.2.bias, seg_head.reg_branches2.3.4.weight, seg_head.reg_branches2.3.4.bias, seg_head.cls_thing_branches.0.weight, seg_head.cls_thing_branches.0.bias, seg_head.cls_thing_branches.1.weight, seg_head.cls_thing_branches.1.bias, seg_head.cls_thing_branches.2.weight, seg_head.cls_thing_branches.2.bias, seg_head.cls_thing_branches.3.weight, seg_head.cls_thing_branches.3.bias, seg_head.cls_stuff_branches.0.weight, seg_head.cls_stuff_branches.0.bias, seg_head.cls_stuff_branches.1.weight, seg_head.cls_stuff_branches.1.bias, seg_head.cls_stuff_branches.2.weight, seg_head.cls_stuff_branches.2.bias, seg_head.cls_stuff_branches.3.weight, seg_head.cls_stuff_branches.3.bias, seg_head.cls_stuff_branches.4.weight, seg_head.cls_stuff_branches.4.bias, seg_head.cls_stuff_branches.5.weight, seg_head.cls_stuff_branches.5.bias, seg_head.things_mask_head.blocks.0.head_norm1.weight, seg_head.things_mask_head.blocks.0.head_norm1.bias, seg_head.things_mask_head.blocks.0.attn.q.weight, seg_head.things_mask_head.blocks.0.attn.q.bias, seg_head.things_mask_head.blocks.0.attn.k.weight, seg_head.things_mask_head.blocks.0.attn.k.bias, seg_head.things_mask_head.blocks.0.attn.v.weight, seg_head.things_mask_head.blocks.0.attn.v.bias, seg_head.things_mask_head.blocks.0.attn.proj.weight, seg_head.things_mask_head.blocks.0.attn.proj.bias, seg_head.things_mask_head.blocks.0.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.0.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.0.attn.linear.0.weight, seg_head.things_mask_head.blocks.0.attn.linear.0.bias, seg_head.things_mask_head.blocks.0.head_norm2.weight, seg_head.things_mask_head.blocks.0.head_norm2.bias, seg_head.things_mask_head.blocks.0.mlp.fc1.weight, seg_head.things_mask_head.blocks.0.mlp.fc1.bias, seg_head.things_mask_head.blocks.0.mlp.fc2.weight, seg_head.things_mask_head.blocks.0.mlp.fc2.bias, seg_head.things_mask_head.blocks.1.head_norm1.weight, seg_head.things_mask_head.blocks.1.head_norm1.bias, seg_head.things_mask_head.blocks.1.attn.q.weight, seg_head.things_mask_head.blocks.1.attn.q.bias, seg_head.things_mask_head.blocks.1.attn.k.weight, seg_head.things_mask_head.blocks.1.attn.k.bias, seg_head.things_mask_head.blocks.1.attn.v.weight, seg_head.things_mask_head.blocks.1.attn.v.bias, seg_head.things_mask_head.blocks.1.attn.proj.weight, seg_head.things_mask_head.blocks.1.attn.proj.bias, seg_head.things_mask_head.blocks.1.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.1.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.1.attn.linear.0.weight, seg_head.things_mask_head.blocks.1.attn.linear.0.bias, seg_head.things_mask_head.blocks.1.head_norm2.weight, seg_head.things_mask_head.blocks.1.head_norm2.bias, seg_head.things_mask_head.blocks.1.mlp.fc1.weight, seg_head.things_mask_head.blocks.1.mlp.fc1.bias, seg_head.things_mask_head.blocks.1.mlp.fc2.weight, seg_head.things_mask_head.blocks.1.mlp.fc2.bias, seg_head.things_mask_head.blocks.2.head_norm1.weight, seg_head.things_mask_head.blocks.2.head_norm1.bias, seg_head.things_mask_head.blocks.2.attn.q.weight, seg_head.things_mask_head.blocks.2.attn.q.bias, seg_head.things_mask_head.blocks.2.attn.k.weight, seg_head.things_mask_head.blocks.2.attn.k.bias, seg_head.things_mask_head.blocks.2.attn.v.weight, seg_head.things_mask_head.blocks.2.attn.v.bias, seg_head.things_mask_head.blocks.2.attn.proj.weight, seg_head.things_mask_head.blocks.2.attn.proj.bias, seg_head.things_mask_head.blocks.2.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.2.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.2.attn.linear.0.weight, seg_head.things_mask_head.blocks.2.attn.linear.0.bias, seg_head.things_mask_head.blocks.2.head_norm2.weight, seg_head.things_mask_head.blocks.2.head_norm2.bias, seg_head.things_mask_head.blocks.2.mlp.fc1.weight, seg_head.things_mask_head.blocks.2.mlp.fc1.bias, seg_head.things_mask_head.blocks.2.mlp.fc2.weight, seg_head.things_mask_head.blocks.2.mlp.fc2.bias, seg_head.things_mask_head.blocks.3.head_norm1.weight, seg_head.things_mask_head.blocks.3.head_norm1.bias, seg_head.things_mask_head.blocks.3.attn.q.weight, seg_head.things_mask_head.blocks.3.attn.q.bias, seg_head.things_mask_head.blocks.3.attn.k.weight, seg_head.things_mask_head.blocks.3.attn.k.bias, seg_head.things_mask_head.blocks.3.attn.v.weight, seg_head.things_mask_head.blocks.3.attn.v.bias, seg_head.things_mask_head.blocks.3.attn.proj.weight, seg_head.things_mask_head.blocks.3.attn.proj.bias, seg_head.things_mask_head.blocks.3.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.3.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.3.attn.linear.0.weight, seg_head.things_mask_head.blocks.3.attn.linear.0.bias, seg_head.things_mask_head.blocks.3.head_norm2.weight, seg_head.things_mask_head.blocks.3.head_norm2.bias, seg_head.things_mask_head.blocks.3.mlp.fc1.weight, seg_head.things_mask_head.blocks.3.mlp.fc1.bias, seg_head.things_mask_head.blocks.3.mlp.fc2.weight, seg_head.things_mask_head.blocks.3.mlp.fc2.bias, seg_head.things_mask_head.attnen.q.weight, seg_head.things_mask_head.attnen.q.bias, seg_head.things_mask_head.attnen.k.weight, seg_head.things_mask_head.attnen.k.bias, seg_head.things_mask_head.attnen.linear_l1.0.weight, seg_head.things_mask_head.attnen.linear_l1.0.bias, seg_head.things_mask_head.attnen.linear.0.weight, seg_head.things_mask_head.attnen.linear.0.bias, seg_head.stuff_mask_head.blocks.0.head_norm1.weight, seg_head.stuff_mask_head.blocks.0.head_norm1.bias, seg_head.stuff_mask_head.blocks.0.attn.q.weight, seg_head.stuff_mask_head.blocks.0.attn.q.bias, seg_head.stuff_mask_head.blocks.0.attn.k.weight, seg_head.stuff_mask_head.blocks.0.attn.k.bias, seg_head.stuff_mask_head.blocks.0.attn.v.weight, seg_head.stuff_mask_head.blocks.0.attn.v.bias, seg_head.stuff_mask_head.blocks.0.attn.proj.weight, seg_head.stuff_mask_head.blocks.0.attn.proj.bias, seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.0.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.0.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.0.head_norm2.weight, seg_head.stuff_mask_head.blocks.0.head_norm2.bias, seg_head.stuff_mask_head.blocks.0.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.0.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.0.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.0.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.0.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.0.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.0.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.0.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.0.norm3.weight, seg_head.stuff_mask_head.blocks.0.norm3.bias, seg_head.stuff_mask_head.blocks.1.head_norm1.weight, seg_head.stuff_mask_head.blocks.1.head_norm1.bias, seg_head.stuff_mask_head.blocks.1.attn.q.weight, seg_head.stuff_mask_head.blocks.1.attn.q.bias, seg_head.stuff_mask_head.blocks.1.attn.k.weight, seg_head.stuff_mask_head.blocks.1.attn.k.bias, seg_head.stuff_mask_head.blocks.1.attn.v.weight, seg_head.stuff_mask_head.blocks.1.attn.v.bias, seg_head.stuff_mask_head.blocks.1.attn.proj.weight, seg_head.stuff_mask_head.blocks.1.attn.proj.bias, seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.1.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.1.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.1.head_norm2.weight, seg_head.stuff_mask_head.blocks.1.head_norm2.bias, seg_head.stuff_mask_head.blocks.1.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.1.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.1.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.1.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.1.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.1.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.1.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.1.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.1.norm3.weight, seg_head.stuff_mask_head.blocks.1.norm3.bias, seg_head.stuff_mask_head.blocks.2.head_norm1.weight, seg_head.stuff_mask_head.blocks.2.head_norm1.bias, seg_head.stuff_mask_head.blocks.2.attn.q.weight, seg_head.stuff_mask_head.blocks.2.attn.q.bias, seg_head.stuff_mask_head.blocks.2.attn.k.weight, seg_head.stuff_mask_head.blocks.2.attn.k.bias, seg_head.stuff_mask_head.blocks.2.attn.v.weight, seg_head.stuff_mask_head.blocks.2.attn.v.bias, seg_head.stuff_mask_head.blocks.2.attn.proj.weight, seg_head.stuff_mask_head.blocks.2.attn.proj.bias, seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.2.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.2.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.2.head_norm2.weight, seg_head.stuff_mask_head.blocks.2.head_norm2.bias, seg_head.stuff_mask_head.blocks.2.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.2.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.2.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.2.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.2.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.2.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.2.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.2.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.2.norm3.weight, seg_head.stuff_mask_head.blocks.2.norm3.bias, seg_head.stuff_mask_head.blocks.3.head_norm1.weight, seg_head.stuff_mask_head.blocks.3.head_norm1.bias, seg_head.stuff_mask_head.blocks.3.attn.q.weight, seg_head.stuff_mask_head.blocks.3.attn.q.bias, seg_head.stuff_mask_head.blocks.3.attn.k.weight, seg_head.stuff_mask_head.blocks.3.attn.k.bias, seg_head.stuff_mask_head.blocks.3.attn.v.weight, seg_head.stuff_mask_head.blocks.3.attn.v.bias, seg_head.stuff_mask_head.blocks.3.attn.proj.weight, seg_head.stuff_mask_head.blocks.3.attn.proj.bias, seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.3.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.3.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.3.head_norm2.weight, seg_head.stuff_mask_head.blocks.3.head_norm2.bias, seg_head.stuff_mask_head.blocks.3.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.3.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.3.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.3.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.3.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.3.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.3.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.3.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.3.norm3.weight, seg_head.stuff_mask_head.blocks.3.norm3.bias, seg_head.stuff_mask_head.blocks.4.head_norm1.weight, seg_head.stuff_mask_head.blocks.4.head_norm1.bias, seg_head.stuff_mask_head.blocks.4.attn.q.weight, seg_head.stuff_mask_head.blocks.4.attn.q.bias, seg_head.stuff_mask_head.blocks.4.attn.k.weight, seg_head.stuff_mask_head.blocks.4.attn.k.bias, seg_head.stuff_mask_head.blocks.4.attn.v.weight, seg_head.stuff_mask_head.blocks.4.attn.v.bias, seg_head.stuff_mask_head.blocks.4.attn.proj.weight, seg_head.stuff_mask_head.blocks.4.attn.proj.bias, seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.4.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.4.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.4.head_norm2.weight, seg_head.stuff_mask_head.blocks.4.head_norm2.bias, seg_head.stuff_mask_head.blocks.4.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.4.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.4.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.4.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.4.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.4.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.4.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.4.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.4.norm3.weight, seg_head.stuff_mask_head.blocks.4.norm3.bias, seg_head.stuff_mask_head.blocks.5.head_norm1.weight, seg_head.stuff_mask_head.blocks.5.head_norm1.bias, seg_head.stuff_mask_head.blocks.5.attn.q.weight, seg_head.stuff_mask_head.blocks.5.attn.q.bias, seg_head.stuff_mask_head.blocks.5.attn.k.weight, seg_head.stuff_mask_head.blocks.5.attn.k.bias, seg_head.stuff_mask_head.blocks.5.attn.v.weight, seg_head.stuff_mask_head.blocks.5.attn.v.bias, seg_head.stuff_mask_head.blocks.5.attn.proj.weight, seg_head.stuff_mask_head.blocks.5.attn.proj.bias, seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.5.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.5.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.5.head_norm2.weight, seg_head.stuff_mask_head.blocks.5.head_norm2.bias, seg_head.stuff_mask_head.blocks.5.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.5.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.5.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.5.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.5.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.5.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.5.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.5.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.5.norm3.weight, seg_head.stuff_mask_head.blocks.5.norm3.bias, seg_head.stuff_mask_head.attnen.q.weight, seg_head.stuff_mask_head.attnen.q.bias, seg_head.stuff_mask_head.attnen.k.weight, seg_head.stuff_mask_head.attnen.k.bias, seg_head.stuff_mask_head.attnen.linear_l1.0.weight, seg_head.stuff_mask_head.attnen.linear_l1.0.bias, seg_head.stuff_mask_head.attnen.linear.0.weight, seg_head.stuff_mask_head.attnen.linear.0.bias

2025-04-22 09:38:58,097 - mmdet - INFO - Start running, host: liuji@hjbog-srdc-20.amd.com, work_dir: /mnt/raid0/liuji/UniAD/projects/work_dirs/stage1_track_map/base_track_map
2025-04-22 09:38:58,097 - mmdet - INFO - Start running, host: liuji@hjbog-srdc-20.amd.com, work_dir: /mnt/raid0/liuji/UniAD/projects/work_dirs/stage1_track_map/base_track_map
2025-04-22 09:38:58,097 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-22 09:38:58,097 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-22 09:38:58,097 - mmdet - INFO - workflow: [('train', 1)], max: 6 epochs
2025-04-22 09:38:58,097 - mmdet - INFO - workflow: [('train', 1)], max: 6 epochs
2025-04-22 09:38:58,098 - mmdet - INFO - Checkpoints will be saved to /mnt/raid0/liuji/UniAD/projects/work_dirs/stage1_track_map/base_track_map by HardDiskBackend.
2025-04-22 09:38:58,098 - mmdet - INFO - Checkpoints will be saved to /mnt/raid0/liuji/UniAD/projects/work_dirs/stage1_track_map/base_track_map by HardDiskBackend.
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 54.509 seconds.
======
Reverse indexing ...
23 category,
8 attribute,
4 visibility,
64386 instance,
12 sensor,
10200 calibrated_sensor,
2631083 ego_pose,
68 log,
850 scene,
34149 sample,
2631083 sample_data,
1166187 sample_annotation,
4 map,
Done loading in 54.756 seconds.
======
Reverse indexing ...
Done reverse indexing in 6.4 seconds.
======
Done reverse indexing in 6.4 seconds.
======
2025-04-22 09:39:02,839 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:02,868 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:02,873 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:02,874 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:02,875 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:02,876 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:02,882 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:02,888 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:02,889 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:02,889 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:02,889 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:02,891 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:02,896 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:02,904 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:02,920 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:02,920 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:02,920 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:02,923 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:02,927 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:02,935 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:02,940 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:02,940 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:02,940 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:02,944 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:02,947 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:02,955 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:03,883 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:03,903 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:03,943 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:03,976 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,126 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:04,143 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:04,176 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:04,198 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,207 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:04,217 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:04,219 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:04,225 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:04,231 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:04,235 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:04,241 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:04,245 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:04,251 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:04,255 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:04,257 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:04,261 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,262 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:04,265 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:04,272 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,274 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:04,281 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,287 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:04,289 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,302 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:04,374 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:04,395 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:05,268 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,279 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,291 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,304 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,305 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,321 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,349 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,378 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,456 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,468 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,483 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,495 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,498 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,512 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,513 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,528 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,530 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,550 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,563 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,586 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,613 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,626 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:05,629 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,646 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:05,665 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,688 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,696 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:05,727 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:05,739 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:05,761 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
Done reverse indexing in 6.7 seconds.
======
Done reverse indexing in 7.6 seconds.
======
2025-04-22 09:39:06,478 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:06,493 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:06,540 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:06,577 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:06,585 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:06,604 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:06,648 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:06,677 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:06,774 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:06,794 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:06,841 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:06,873 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:07,072 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:07,088 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:07,090 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:07,111 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:07,129 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:07,157 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:07,159 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:07,191 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:07,266 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:07,290 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:07,294 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:07,316 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:07,335 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:07,366 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:07,366 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:07,386 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:07,394 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:07,428 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:07,974 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:07,997 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:08,018 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:08,038 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:08,042 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:08,075 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:08,084 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:08,114 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:08,330 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:08,349 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:08,394 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:08,423 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:08,606 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:08,629 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:08,673 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:08,704 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:08,732 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:08,755 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:08,807 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:08,841 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:09,014 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:09,036 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:09,083 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:09,089 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:09,108 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:09,112 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:09,115 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:09,153 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:09,157 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:09,182 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:09,637 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:09,658 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:09,670 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:09,702 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:09,711 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:09,733 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:10,079 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:10,100 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:10,148 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:10,182 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:10,406 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:10,426 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:10,469 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:10,498 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:10,925 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:10,952 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:10,973 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:11,000 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:11,024 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:11,032 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:11,056 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:11,078 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:11,124 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:11,156 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:11,227 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:11,245 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:11,286 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:11,313 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:11,428 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:11,452 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:11,490 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:11,516 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:11,613 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:11,635 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:11,687 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:11,702 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:11,720 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:11,727 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:11,758 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:11,783 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:12,277 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:12,319 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:12,419 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:12,441 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:12,479 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:12,506 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:12,822 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:12,843 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:12,886 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:12,913 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:12,982 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:13,002 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:13,026 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:13,046 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:13,047 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:13,053 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:13,064 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:13,085 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:13,088 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:13,103 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:13,116 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:13,132 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:13,275 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:13,295 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:13,342 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:13,370 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:13,627 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:13,667 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:13,815 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:13,833 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:13,871 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:13,900 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:14,301 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:14,320 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:14,370 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:14,379 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:14,399 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:14,402 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:14,414 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:14,436 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:14,445 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:14,474 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:14,486 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:14,518 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:14,833 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:14,850 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:14,891 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:14,918 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:14,953 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:14,993 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:15,172 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:15,193 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:15,199 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:15,217 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:15,237 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:15,259 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:15,269 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:15,309 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:15,726 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:15,746 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:15,787 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:15,817 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:15,897 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:15,898 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:15,921 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:15,922 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:15,971 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:15,972 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:16,003 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:16,004 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:16,576 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:16,594 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:16,630 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:16,634 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:16,652 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:16,661 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:16,703 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:16,734 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:17,088 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:17,114 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:17,169 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:17,171 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:17,194 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:17,205 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:17,210 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:17,234 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:17,246 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:17,282 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:17,284 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:17,315 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:17,383 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:17,425 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:17,730 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:17,754 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:17,807 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:17,834 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:17,840 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:17,857 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:17,906 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:17,937 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:18,317 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:18,338 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:18,390 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:18,423 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:18,461 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:18,500 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:18,998 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:19,037 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:19,059 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:19,103 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:19,106 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:19,132 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:19,185 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:19,216 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:19,371 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:19,378 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:19,394 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:19,399 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:19,439 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:19,439 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:19,472 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:19,473 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:19,998 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:20,018 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:20,059 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:20,070 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:20,071 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:20,079 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:20,106 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:20,116 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:20,127 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:20,156 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:20,468 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:20,508 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:20,635 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:20,672 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:21,097 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:21,117 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:21,165 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:21,174 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:21,195 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:21,197 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:21,247 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:21,276 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:21,460 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:21,482 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:21,529 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:21,546 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:21,560 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:21,568 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:21,616 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:21,649 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:21,689 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:21,728 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:21,734 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:21,747 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:21,794 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:21,825 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:21,839 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:21,880 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:22,295 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:22,330 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:22,845 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:22,865 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:22,909 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:22,941 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:23,060 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:23,084 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:23,085 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:23,108 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:23,131 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:23,159 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:23,167 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:23,194 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:23,292 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:23,328 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:23,333 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:23,371 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:23,533 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:23,558 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:23,613 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:23,649 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:23,895 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:23,938 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:24,017 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:24,056 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:24,510 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:24,534 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:24,584 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:24,622 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:24,672 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:24,694 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:24,743 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:24,774 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:24,841 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:24,901 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:24,949 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:24,990 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:25,173 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:25,197 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:25,243 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:25,278 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:25,365 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:25,406 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:26,129 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:26,150 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:26,196 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:26,223 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:26,260 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:26,283 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:26,335 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:26,339 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:26,366 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:26,375 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:26,650 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:26,672 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:26,702 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:26,719 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:26,719 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:26,750 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:26,756 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:26,781 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:26,891 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:26,929 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:27,455 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:27,485 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:27,502 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:27,540 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:27,541 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:27,588 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:27,652 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:27,675 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:27,733 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:27,767 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:28,033 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:28,055 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:28,097 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:28,111 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:28,124 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:28,124 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:28,135 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:28,142 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:28,181 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:28,183 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:28,206 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:28,211 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:28,333 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:28,368 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:28,712 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:28,748 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:29,140 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:29,153 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:29,159 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:29,180 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:29,203 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:29,227 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:29,231 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:29,264 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:29,477 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:29,499 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:29,549 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:29,590 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:29,786 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:29,818 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:29,830 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:29,840 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:29,889 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:29,924 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:29,924 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:29,953 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:29,959 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:29,974 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:30,017 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:30,045 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:30,809 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:30,831 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:30,884 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:30,898 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:30,911 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:30,921 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:30,970 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:31,001 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:31,030 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:31,053 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:31,103 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:31,136 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:31,149 - shapely.geos - INFO - Self-intersection at or near point 134.36374450633136 1091.2903070826083
2025-04-22 09:39:31,184 - shapely.geos - INFO - Self-intersection at or near point 165.02390945024581 1095.7013529720464
2025-04-22 09:39:31,502 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:31,524 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:31,575 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:31,608 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:31,774 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:31,796 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:31,847 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:31,881 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:31,921 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:31,941 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:31,990 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:32,019 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:32,602 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:32,622 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:32,641 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:32,663 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:32,670 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:32,703 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:32,710 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:32,726 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:32,741 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:32,745 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:32,794 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:32,822 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:33,238 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:33,259 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:33,306 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:33,339 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:33,799 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:33,818 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:33,848 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:33,863 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:33,870 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:33,894 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:33,922 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:33,952 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:34,459 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:34,488 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:34,552 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:34,594 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:34,812 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:34,830 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:34,872 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:34,900 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:35,659 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:35,678 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:35,724 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:35,750 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
2025-04-22 09:39:35,770 - shapely.geos - INFO - Self-intersection at or near point 471.98647224679792 1711.8705119768197
2025-04-22 09:39:35,788 - shapely.geos - INFO - Self-intersection at or near point 1070.4578478045039 1612.8333503895974
2025-04-22 09:39:35,825 - shapely.geos - INFO - Self-intersection at or near point 1147.8004993016441 1404.4814343572746
2025-04-22 09:39:35,852 - shapely.geos - INFO - Self-intersection at or near point 1942.7006727221749 863.01771240972209
Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 163, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
RuntimeError: stack expects each tensor to be equal size, but got [18] at entry 0 and [21] at entry 1

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 162, in collate_tensor_fn
    out = elem.new(storage).resize_(len(batch), *list(elem.size()))
RuntimeError: Trying to resize storage that is not resizable

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 163, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
RuntimeError: stack expects each tensor to be equal size, but got [17] at entry 0 and [40] at entry 1

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 163, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
RuntimeError: stack expects each tensor to be equal size, but got [14] at entry 0 and [48] at entry 1

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 163, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
RuntimeError: stack expects each tensor to be equal size, but got [17] at entry 0 and [44] at entry 1

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 163, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
RuntimeError: stack expects each tensor to be equal size, but got [15] at entry 0 and [10] at entry 1

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 162, in collate_tensor_fn
    out = elem.new(storage).resize_(len(batch), *list(elem.size()))
RuntimeError: Trying to resize storage that is not resizable

Traceback (most recent call last):
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 257, in <module>
    main()
  File "/mnt/raid0/liuji/UniAD/./tools/train.py", line 245, in main
    custom_train_model(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/train.py", line 21, in custom_train_model
    custom_train_detector(
  File "/mnt/raid0/liuji/UniAD/projects/mmdet3d_plugin/uniad/apis/mmdet_train.py", line 194, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 136, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/mmopenlab/mmcv/mmcv/runner/epoch_based_runner.py", line 49, in train
    for i, data_batch in enumerate(self.data_loader):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1333, in _next_data
    return self._process_data(data)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1359, in _process_data
    data.reraise()
  File "/opt/conda/lib/python3.9/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 61, in fetch
    return self.collate_fn(data)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/mmopenlab/mmcv/mmcv/parallel/collate.py", line 84, in collate
    return default_collate(batch)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 265, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 120, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/opt/conda/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py", line 162, in collate_tensor_fn
    out = elem.new(storage).resize_(len(batch), *list(elem.size()))
RuntimeError: Trying to resize storage that is not resizable

WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 90467 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 90468 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 90469 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 90470 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 90472 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 90474 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 4 (pid: 90471) of binary: /opt/conda/bin/python
Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/conda/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/opt/conda/lib/python3.9/site-packages/torch/distributed/run.py", line 766, in <module>
    main()
  File "/opt/conda/lib/python3.9/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 346, in wrapper
    return f(*args, **kwargs)
  File "/opt/conda/lib/python3.9/site-packages/torch/distributed/run.py", line 762, in main
    run(args)
  File "/opt/conda/lib/python3.9/site-packages/torch/distributed/run.py", line 753, in run
    elastic_launch(
  File "/opt/conda/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 132, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/opt/conda/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 246, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
./tools/train.py FAILED
------------------------------------------------------------
Failures:
[1]:
  time      : 2025-04-22_09:40:18
  host      : hjbog-srdc-20.amd.com
  rank      : 6 (local_rank: 6)
  exitcode  : 1 (pid: 90473)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2025-04-22_09:40:18
  host      : hjbog-srdc-20.amd.com
  rank      : 4 (local_rank: 4)
  exitcode  : 1 (pid: 90471)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
