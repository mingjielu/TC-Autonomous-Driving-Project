2025-05-20 09:42:37,833 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.10.15 (main, Oct  3 2024, 07:27:34) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3: AMD Radeon Graphics
CUDA_HOME: /opt/rocm
NVCC: Not Available
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 2.7.0a0+git6374332
PyTorch compiling details: PyTorch built with:
  - GCC 11.4
  - C++ Version: 201703
  - Intel(R) MKL-DNN v3.5.3 (Git Hash 66f0cb9eb66affd2da3bf5f8d897376f04aae6af)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - HIP Runtime 6.3.42131
  - MIOpen 3.3.0
  - Magma 2.7.2
  - Build settings: BLAS_INFO=open, BUILD_TYPE=Release, COMMIT_SHA=6374332d33953766af2359a66027dc4f90c66e07, CXX_COMPILER=/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=1 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOXPUPTI=ON -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=range-loop-construct -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-unknown-pragmas -Wno-unused-parameter -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, FORCE_FALLBACK_CUDA_MPI=1, LAPACK_INFO=open, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, TORCH_VERSION=2.7.0, USE_CUDA=OFF, USE_CUDNN=OFF, USE_CUSPARSELT=OFF, USE_EIGEN_FOR_BLAS=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=OFF, USE_MKLDNN=ON, USE_MPI=ON, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=ON, USE_ROCM_KERNEL_ASSERT=OFF, 

TorchVision: 0.22.0a0+867521e
OpenCV: 4.11.0
MMCV: 1.7.1
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 60342131
MMDetection: 2.26.0
MMSegmentation: 0.25.0
MMDetection3D: 1.0.0rc4+
spconv2.0: False
------------------------------------------------------------

2025-05-20 09:42:39,319 - mmdet - INFO - Distributed training: True
2025-05-20 09:42:40,521 - mmdet - INFO - Config:
point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesE2EDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=False,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=True)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadMultiViewImageFromFilesInCeph',
        to_float32=True,
        file_client_args=dict(backend='disk'),
        img_root='data/nuscenes/'),
    dict(type='PhotoMetricDistortionMultiViewImage'),
    dict(
        type='LoadAnnotations3D_E2E',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False,
        with_future_anns=True,
        with_ins_inds_3d=True,
        ins_inds_add_1=True),
    dict(
        type='GenerateOccFlowLabels',
        grid_conf=dict(
            xbound=[-50.0, 50.0, 0.5],
            ybound=[-50.0, 50.0, 0.5],
            zbound=[-10.0, 10.0, 20.0]),
        ignore_index=255,
        only_vehicle=True,
        filter_invisible=False),
    dict(
        type='ObjectRangeFilterTrack',
        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
    dict(
        type='ObjectNameFilterTrack',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='CustomCollect3D',
        keys=[
            'gt_bboxes_3d', 'gt_labels_3d', 'gt_inds', 'img', 'timestamp',
            'l2g_r_mat', 'l2g_t', 'gt_fut_traj', 'gt_fut_traj_mask',
            'gt_past_traj', 'gt_past_traj_mask', 'gt_sdc_bbox', 'gt_sdc_label',
            'gt_sdc_fut_traj', 'gt_sdc_fut_traj_mask', 'gt_lane_labels',
            'gt_lane_bboxes', 'gt_lane_masks', 'gt_segmentation',
            'gt_instance', 'gt_centerness', 'gt_offset', 'gt_flow',
            'gt_backward_flow', 'gt_occ_has_invalid_frame',
            'gt_occ_img_is_valid', 'gt_future_boxes', 'gt_future_labels',
            'sdc_planning', 'sdc_planning_mask', 'command'
        ])
]
test_pipeline = [
    dict(
        type='LoadMultiViewImageFromFilesInCeph',
        to_float32=True,
        file_client_args=dict(backend='disk'),
        img_root='data/nuscenes/'),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='LoadAnnotations3D_E2E',
        with_bbox_3d=False,
        with_label_3d=False,
        with_attr_label=False,
        with_future_anns=True,
        with_ins_inds_3d=False,
        ins_inds_add_1=True),
    dict(
        type='GenerateOccFlowLabels',
        grid_conf=dict(
            xbound=[-50.0, 50.0, 0.5],
            ybound=[-50.0, 50.0, 0.5],
            zbound=[-10.0, 10.0, 20.0]),
        ignore_index=255,
        only_vehicle=True,
        filter_invisible=False),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1600, 900),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='CustomCollect3D',
                keys=[
                    'img', 'timestamp', 'l2g_r_mat', 'l2g_t', 'gt_lane_labels',
                    'gt_lane_bboxes', 'gt_lane_masks', 'gt_segmentation',
                    'gt_instance', 'gt_centerness', 'gt_offset', 'gt_flow',
                    'gt_backward_flow', 'gt_occ_has_invalid_frame',
                    'gt_occ_img_is_valid', 'sdc_planning', 'sdc_planning_mask',
                    'command'
                ])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=10,
        file_client_args=dict(backend='disk')),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=8,
    train=dict(
        type='NuScenesE2EDataset',
        data_root='data/nuscenes/',
        ann_file='data/infos/nuscenes_infos_temporal_train.pkl',
        pipeline=[
            dict(
                type='LoadMultiViewImageFromFilesInCeph',
                to_float32=True,
                file_client_args=dict(backend='disk'),
                img_root='data/nuscenes/'),
            dict(type='PhotoMetricDistortionMultiViewImage'),
            dict(
                type='LoadAnnotations3D_E2E',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False,
                with_future_anns=True,
                with_ins_inds_3d=True,
                ins_inds_add_1=True),
            dict(
                type='GenerateOccFlowLabels',
                grid_conf=dict(
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    zbound=[-10.0, 10.0, 20.0]),
                ignore_index=255,
                only_vehicle=True,
                filter_invisible=False),
            dict(
                type='ObjectRangeFilterTrack',
                point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
            dict(
                type='ObjectNameFilterTrack',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='CustomCollect3D',
                keys=[
                    'gt_bboxes_3d', 'gt_labels_3d', 'gt_inds', 'img',
                    'timestamp', 'l2g_r_mat', 'l2g_t', 'gt_fut_traj',
                    'gt_fut_traj_mask', 'gt_past_traj', 'gt_past_traj_mask',
                    'gt_sdc_bbox', 'gt_sdc_label', 'gt_sdc_fut_traj',
                    'gt_sdc_fut_traj_mask', 'gt_lane_labels', 'gt_lane_bboxes',
                    'gt_lane_masks', 'gt_segmentation', 'gt_instance',
                    'gt_centerness', 'gt_offset', 'gt_flow',
                    'gt_backward_flow', 'gt_occ_has_invalid_frame',
                    'gt_occ_img_is_valid', 'gt_future_boxes',
                    'gt_future_labels', 'sdc_planning', 'sdc_planning_mask',
                    'command'
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=False,
        box_type_3d='LiDAR',
        file_client_args=dict(backend='disk'),
        use_valid_flag=True,
        patch_size=[102.4, 102.4],
        canvas_size=(200, 200),
        bev_size=(200, 200),
        queue_length=5,
        predict_steps=12,
        past_steps=4,
        fut_steps=4,
        use_nonlinear_optimizer=True,
        occ_receptive_field=3,
        occ_n_future=6,
        occ_filter_invalid_sample=False),
    val=dict(
        type='NuScenesE2EDataset',
        data_root='data/nuscenes/',
        ann_file='data/infos/nuscenes_infos_temporal_val.pkl',
        pipeline=[
            dict(
                type='LoadMultiViewImageFromFilesInCeph',
                to_float32=True,
                file_client_args=dict(backend='disk'),
                img_root='data/nuscenes/'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='LoadAnnotations3D_E2E',
                with_bbox_3d=False,
                with_label_3d=False,
                with_attr_label=False,
                with_future_anns=True,
                with_ins_inds_3d=False,
                ins_inds_add_1=True),
            dict(
                type='GenerateOccFlowLabels',
                grid_conf=dict(
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    zbound=[-10.0, 10.0, 20.0]),
                ignore_index=255,
                only_vehicle=True,
                filter_invisible=False),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1600, 900),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='CustomCollect3D',
                        keys=[
                            'img', 'timestamp', 'l2g_r_mat', 'l2g_t',
                            'gt_lane_labels', 'gt_lane_bboxes',
                            'gt_lane_masks', 'gt_segmentation', 'gt_instance',
                            'gt_centerness', 'gt_offset', 'gt_flow',
                            'gt_backward_flow', 'gt_occ_has_invalid_frame',
                            'gt_occ_img_is_valid', 'sdc_planning',
                            'sdc_planning_mask', 'command'
                        ])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=True,
        box_type_3d='LiDAR',
        file_client_args=dict(backend='disk'),
        patch_size=[102.4, 102.4],
        canvas_size=(200, 200),
        bev_size=(200, 200),
        predict_steps=12,
        past_steps=4,
        fut_steps=4,
        use_nonlinear_optimizer=True,
        samples_per_gpu=1,
        eval_mod=['det', 'track', 'map'],
        occ_receptive_field=3,
        occ_n_future=6,
        occ_filter_invalid_sample=False),
    test=dict(
        type='NuScenesE2EDataset',
        data_root='data/nuscenes/',
        ann_file='data/infos/nuscenes_infos_temporal_val.pkl',
        pipeline=[
            dict(
                type='LoadMultiViewImageFromFilesInCeph',
                to_float32=True,
                file_client_args=dict(backend='disk'),
                img_root='data/nuscenes/'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='LoadAnnotations3D_E2E',
                with_bbox_3d=False,
                with_label_3d=False,
                with_attr_label=False,
                with_future_anns=True,
                with_ins_inds_3d=False,
                ins_inds_add_1=True),
            dict(
                type='GenerateOccFlowLabels',
                grid_conf=dict(
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    zbound=[-10.0, 10.0, 20.0]),
                ignore_index=255,
                only_vehicle=True,
                filter_invisible=False),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1600, 900),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='CustomCollect3D',
                        keys=[
                            'img', 'timestamp', 'l2g_r_mat', 'l2g_t',
                            'gt_lane_labels', 'gt_lane_bboxes',
                            'gt_lane_masks', 'gt_segmentation', 'gt_instance',
                            'gt_centerness', 'gt_offset', 'gt_flow',
                            'gt_backward_flow', 'gt_occ_has_invalid_frame',
                            'gt_occ_img_is_valid', 'sdc_planning',
                            'sdc_planning_mask', 'command'
                        ])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=True,
        box_type_3d='LiDAR',
        file_client_args=dict(backend='disk'),
        patch_size=[102.4, 102.4],
        canvas_size=(200, 200),
        bev_size=(200, 200),
        predict_steps=12,
        past_steps=4,
        fut_steps=4,
        occ_n_future=6,
        use_nonlinear_optimizer=True,
        eval_mod=['det', 'map', 'track']),
    shuffler_sampler=dict(type='DistributedGroupSampler'),
    nonshuffler_sampler=dict(type='DistributedSampler'))
evaluation = dict(
    interval=6,
    pipeline=[
        dict(
            type='LoadMultiViewImageFromFilesInCeph',
            to_float32=True,
            file_client_args=dict(backend='disk'),
            img_root='data/nuscenes/'),
        dict(
            type='NormalizeMultiviewImage',
            mean=[103.53, 116.28, 123.675],
            std=[1.0, 1.0, 1.0],
            to_rgb=False),
        dict(type='PadMultiViewImage', size_divisor=32),
        dict(
            type='LoadAnnotations3D_E2E',
            with_bbox_3d=False,
            with_label_3d=False,
            with_attr_label=False,
            with_future_anns=True,
            with_ins_inds_3d=False,
            ins_inds_add_1=True),
        dict(
            type='GenerateOccFlowLabels',
            grid_conf=dict(
                xbound=[-50.0, 50.0, 0.5],
                ybound=[-50.0, 50.0, 0.5],
                zbound=[-10.0, 10.0, 20.0]),
            ignore_index=255,
            only_vehicle=True,
            filter_invisible=False),
        dict(
            type='MultiScaleFlipAug3D',
            img_scale=(1600, 900),
            pts_scale_ratio=1,
            flip=False,
            transforms=[
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ],
                    with_label=False),
                dict(
                    type='CustomCollect3D',
                    keys=[
                        'img', 'timestamp', 'l2g_r_mat', 'l2g_t',
                        'gt_lane_labels', 'gt_lane_bboxes', 'gt_lane_masks',
                        'gt_segmentation', 'gt_instance', 'gt_centerness',
                        'gt_offset', 'gt_flow', 'gt_backward_flow',
                        'gt_occ_has_invalid_frame', 'gt_occ_img_is_valid',
                        'sdc_planning', 'sdc_planning_mask', 'command'
                    ])
            ])
    ],
    planning_evaluation_strategy='uniad')
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=10,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './projects/work_dirs/stage1_track_map/base_track_map/'
load_from = 'ckpts/bevformer_r101_dcn_24ep.pth'
resume_from = None
workflow = [('train', 1)]
plugin = True
plugin_dir = 'projects/mmdet3d_plugin/'
voxel_size = [0.2, 0.2, 8]
patch_size = [102.4, 102.4]
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
_dim_ = 256
_pos_dim_ = 128
_ffn_dim_ = 512
_num_levels_ = 4
bev_h_ = 200
bev_w_ = 200
_feed_dim_ = 512
_dim_half_ = 128
canvas_size = (200, 200)
queue_length = 5
predict_steps = 12
predict_modes = 6
fut_steps = 4
past_steps = 4
use_nonlinear_optimizer = True
occ_n_future = 4
occ_n_future_plan = 6
occ_n_future_max = 6
planning_steps = 6
use_col_optim = True
planning_evaluation_strategy = 'uniad'
occflow_grid_conf = dict(
    xbound=[-50.0, 50.0, 0.5],
    ybound=[-50.0, 50.0, 0.5],
    zbound=[-10.0, 10.0, 20.0])
train_gt_iou_threshold = 0.3
model = dict(
    type='UniAD',
    gt_iou_threshold=0.3,
    queue_length=5,
    use_grid_mask=True,
    video_test_mode=True,
    num_query=900,
    num_classes=10,
    pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
    img_backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(1, 2, 3),
        frozen_stages=4,
        norm_cfg=dict(type='BN2d', requires_grad=False),
        norm_eval=True,
        style='caffe',
        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),
        stage_with_dcn=(False, False, True, True)),
    img_neck=dict(
        type='FPN',
        in_channels=[512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_output',
        num_outs=4,
        relu_before_extra_convs=True),
    freeze_img_backbone=True,
    freeze_img_neck=False,
    freeze_bn=False,
    score_thresh=0.4,
    filter_score_thresh=0.35,
    qim_args=dict(
        qim_type='QIMBase',
        merger_dropout=0,
        update_query_pos=True,
        fp_ratio=0.3,
        random_drop=0.1),
    mem_args=dict(
        memory_bank_type='MemoryBank',
        memory_bank_score_thresh=0.0,
        memory_bank_len=4),
    loss_cfg=dict(
        type='ClipMatcher',
        num_classes=10,
        weight_dict=None,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        assigner=dict(
            type='HungarianAssigner3DTrack',
            cls_cost=dict(type='FocalLossCost', weight=2.0),
            reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_past_traj_weight=0.0),
    pts_bbox_head=dict(
        type='BEVFormerTrackHead',
        bev_h=200,
        bev_w=200,
        num_query=900,
        num_classes=10,
        in_channels=256,
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        past_steps=4,
        fut_steps=4,
        transformer=dict(
            type='PerceptionTransformer',
            rotate_prev_bev=True,
            use_shift=True,
            use_can_bus=True,
            embed_dims=256,
            encoder=dict(
                type='BEVFormerEncoder',
                num_layers=6,
                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
                num_points_in_pillar=4,
                return_intermediate=False,
                transformerlayers=dict(
                    type='BEVFormerLayer',
                    attn_cfgs=[
                        dict(
                            type='TemporalSelfAttention',
                            embed_dims=256,
                            num_levels=1),
                        dict(
                            type='SpatialCrossAttention',
                            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
                            deformable_attention=dict(
                                type='MSDeformableAttention3D',
                                embed_dims=256,
                                num_points=8,
                                num_levels=4),
                            embed_dims=256)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm'))),
            decoder=dict(
                type='DetectionTransformerDecoder',
                num_layers=6,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='CustomMSDeformableAttention',
                            embed_dims=256,
                            num_levels=1)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        bbox_coder=dict(
            type='NMSFreeCoder',
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
            max_num=300,
            voxel_size=[0.2, 0.2, 8],
            num_classes=10),
        positional_encoding=dict(
            type='LearnedPositionalEncoding',
            num_feats=128,
            row_num_embed=200,
            col_num_embed=200),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0.0)),
    seg_head=dict(
        type='PansegformerHead',
        bev_h=200,
        bev_w=200,
        canvas_size=(200, 200),
        pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
        num_query=300,
        num_classes=4,
        num_things_classes=3,
        num_stuff_classes=1,
        in_channels=2048,
        sync_cls_avg_factor=True,
        as_two_stage=False,
        with_box_refine=True,
        transformer=dict(
            type='SegDeformableTransformer',
            encoder=dict(
                type='DetrTransformerEncoder',
                num_layers=6,
                transformerlayers=dict(
                    type='BaseTransformerLayer',
                    attn_cfgs=dict(
                        type='MultiScaleDeformableAttention',
                        embed_dims=256,
                        num_levels=4),
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),
            decoder=dict(
                type='DeformableDetrTransformerDecoder',
                num_layers=6,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='MultiScaleDeformableAttention',
                            embed_dims=256,
                            num_levels=4)
                    ],
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=5.0),
        loss_iou=dict(type='GIoULoss', loss_weight=2.0),
        loss_mask=dict(type='DiceLoss', loss_weight=2.0),
        thing_transformer_head=dict(
            type='SegMaskHead', d_model=256, nhead=8, num_decoder_layers=4),
        stuff_transformer_head=dict(
            type='SegMaskHead',
            d_model=256,
            nhead=8,
            num_decoder_layers=6,
            self_attn=True),
        train_cfg=dict(
            assigner=dict(
                type='HungarianAssigner',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(
                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),
                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0)),
            assigner_with_mask=dict(
                type='HungarianAssigner_multi_info',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(
                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),
                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0),
                mask_cost=dict(type='DiceCost', weight=2.0)),
            sampler=dict(type='PseudoSampler'),
            sampler_with_mask=dict(type='PseudoSampler_segformer'))),
    train_cfg=dict(
        pts=dict(
            grid_size=[512, 512, 1],
            voxel_size=[0.2, 0.2, 8],
            point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
            out_size_factor=4,
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0.0),
                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]))))
info_root = 'data/infos/'
ann_file_train = 'data/infos/nuscenes_infos_temporal_train.pkl'
ann_file_val = 'data/infos/nuscenes_infos_temporal_val.pkl'
ann_file_test = 'data/infos/nuscenes_infos_temporal_val.pkl'
optimizer = dict(
    type='AdamW',
    lr=0.0002,
    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),
    weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    min_lr_ratio=0.001)
total_epochs = 6
runner = dict(type='EpochBasedRunner', max_epochs=6)
find_unused_parameters = True
gpu_ids = range(0, 4)

2025-05-20 09:42:40,521 - mmdet - INFO - Set random seed to 0, deterministic: True
2025-05-20 09:42:41,811 - mmdet - INFO - Model:
UniAD(
  (pts_bbox_head): BEVFormerTrackHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): LearnedPositionalEncoding(num_feats=128, row_num_embed=200, col_num_embed=200)
    (transformer): PerceptionTransformer(
      (encoder): BEVFormerEncoder(
        (layers): ModuleList(
          (0-5): 6 x BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): SpatialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (deformable_attention): MSDeformableAttention3D(
                  (sampling_offsets): Linear(in_features=256, out_features=512, bias=True)
                  (attention_weights): Linear(in_features=256, out_features=256, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0-2): 3 x LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (decoder): DetectionTransformerDecoder(
        (layers): ModuleList(
          (0-5): 6 x DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0-2): 3 x LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (can_bus_mlp): Sequential(
        (0): Linear(in_features=18, out_features=128, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=128, out_features=256, bias=True)
        (3): ReLU(inplace=True)
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (cls_branches): ModuleList(
      (0-5): 6 x Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0-5): 6 x Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (past_traj_reg_branches): ModuleList(
      (0-5): 6 x Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=16, bias=True)
      )
    )
    (bev_embedding): Embedding(40000, 256)
  )
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
  (img_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0-2): 3 x ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (grid_mask): GridMask()
  (query_embedding): Embedding(901, 512)
  (reference_points): Linear(in_features=256, out_features=3, bias=True)
  (query_interact): QueryInteractionModule(
    (self_attn): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
    )
    (linear1): Linear(in_features=256, out_features=256, bias=True)
    (dropout): Dropout(p=0, inplace=False)
    (linear2): Linear(in_features=256, out_features=256, bias=True)
    (linear_pos1): Linear(in_features=256, out_features=256, bias=True)
    (linear_pos2): Linear(in_features=256, out_features=256, bias=True)
    (dropout_pos1): Dropout(p=0, inplace=False)
    (dropout_pos2): Dropout(p=0, inplace=False)
    (norm_pos): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (linear_feat1): Linear(in_features=256, out_features=256, bias=True)
    (linear_feat2): Linear(in_features=256, out_features=256, bias=True)
    (dropout_feat1): Dropout(p=0, inplace=False)
    (dropout_feat2): Dropout(p=0, inplace=False)
    (norm_feat): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (dropout1): Dropout(p=0, inplace=False)
    (dropout2): Dropout(p=0, inplace=False)
  )
  (memory_bank): MemoryBank(
    (save_proj): Linear(in_features=256, out_features=256, bias=True)
    (temporal_attn): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
    )
    (temporal_fc1): Linear(in_features=256, out_features=256, bias=True)
    (temporal_fc2): Linear(in_features=256, out_features=256, bias=True)
    (temporal_norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    (temporal_norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
  (criterion): ClipMatcher(
    (loss_cls): FocalLoss()
    (loss_bboxes): L1Loss()
    (loss_predictions): SmoothL1Loss()
  )
  (seg_head): PansegformerHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): SegDeformableTransformer(
      (encoder): DetrTransformerEncoder(
        (layers): ModuleList(
          (0-5): 6 x BaseTransformerLayer(
            (attentions): ModuleList(
              (0): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0-1): 2 x LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (decoder): DeformableDetrTransformerDecoder(
        (layers): ModuleList(
          (0-5): 6 x DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): MultiScaleDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0-2): 3 x LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (reference_points): Linear(in_features=256, out_features=2, bias=True)
    )
    (bev_embedding): Embedding(40000, 256)
    (cls_branches): ModuleList(
      (0-5): 6 x Linear(in_features=256, out_features=3, bias=True)
    )
    (reg_branches): ModuleList(
      (0-5): 6 x Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
    )
    (query_embedding): Embedding(300, 512)
    (stuff_query): Embedding(1, 512)
    (reg_branches2): ModuleList(
      (0-3): 4 x Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=4, bias=True)
      )
    )
    (cls_thing_branches): ModuleList(
      (0-3): 4 x Linear(in_features=256, out_features=3, bias=True)
    )
    (cls_stuff_branches): ModuleList(
      (0-5): 6 x Linear(in_features=256, out_features=1, bias=True)
    )
    (loss_mask): DiceLoss()
    (things_mask_head): SegMaskHead(
      (blocks): ModuleList(
        (0-3): 4 x Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
        )
      )
      (attnen): AttentionTail(
        (q): Linear(in_features=256, out_features=256, bias=True)
        (k): Linear(in_features=256, out_features=256, bias=True)
        (linear_l1): Sequential(
          (0): Linear(in_features=8, out_features=8, bias=True)
          (1): ReLU()
        )
        (linear): Sequential(
          (0): Linear(in_features=8, out_features=1, bias=True)
          (1): ReLU()
        )
      )
    )
    (stuff_mask_head): SegMaskHead(
      (blocks): ModuleList(
        (0-5): 6 x Block(
          (head_norm1): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (attn): Attention(
            (q): Linear(in_features=256, out_features=256, bias=True)
            (k): Linear(in_features=256, out_features=256, bias=True)
            (v): Linear(in_features=256, out_features=256, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
            (linear_l1): Sequential(
              (0): Linear(in_features=8, out_features=8, bias=True)
              (1): ReLU()
            )
            (linear): Sequential(
              (0): Linear(in_features=8, out_features=1, bias=True)
              (1): ReLU()
            )
          )
          (drop_path): Identity()
          (head_norm2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=1024, bias=True)
            (act): GELU(approximate='none')
            (fc2): Linear(in_features=1024, out_features=256, bias=True)
            (drop): Dropout(p=0, inplace=False)
          )
          (self_attention): SelfAttention(
            (qkv): Linear(in_features=256, out_features=768, bias=True)
            (attn_drop): Dropout(p=0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0, inplace=False)
          )
          (norm3): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
        )
      )
      (attnen): AttentionTail(
        (q): Linear(in_features=256, out_features=256, bias=True)
        (k): Linear(in_features=256, out_features=256, bias=True)
        (linear_l1): Sequential(
          (0): Linear(in_features=8, out_features=8, bias=True)
          (1): ReLU()
        )
        (linear): Sequential(
          (0): Linear(in_features=8, out_features=1, bias=True)
          (1): ReLU()
        )
      )
    )
  )
)
2025-05-20 09:44:45,750 - mmdet - INFO - load checkpoint from local path: ckpts/bevformer_r101_dcn_24ep.pth
2025-05-20 09:44:46,120 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: pts_bbox_head.query_embedding.weight, pts_bbox_head.transformer.reference_points.weight, pts_bbox_head.transformer.reference_points.bias

missing keys in source state_dict: pts_bbox_head.past_traj_reg_branches.0.0.weight, pts_bbox_head.past_traj_reg_branches.0.0.bias, pts_bbox_head.past_traj_reg_branches.0.2.weight, pts_bbox_head.past_traj_reg_branches.0.2.bias, pts_bbox_head.past_traj_reg_branches.0.4.weight, pts_bbox_head.past_traj_reg_branches.0.4.bias, pts_bbox_head.past_traj_reg_branches.1.0.weight, pts_bbox_head.past_traj_reg_branches.1.0.bias, pts_bbox_head.past_traj_reg_branches.1.2.weight, pts_bbox_head.past_traj_reg_branches.1.2.bias, pts_bbox_head.past_traj_reg_branches.1.4.weight, pts_bbox_head.past_traj_reg_branches.1.4.bias, pts_bbox_head.past_traj_reg_branches.2.0.weight, pts_bbox_head.past_traj_reg_branches.2.0.bias, pts_bbox_head.past_traj_reg_branches.2.2.weight, pts_bbox_head.past_traj_reg_branches.2.2.bias, pts_bbox_head.past_traj_reg_branches.2.4.weight, pts_bbox_head.past_traj_reg_branches.2.4.bias, pts_bbox_head.past_traj_reg_branches.3.0.weight, pts_bbox_head.past_traj_reg_branches.3.0.bias, pts_bbox_head.past_traj_reg_branches.3.2.weight, pts_bbox_head.past_traj_reg_branches.3.2.bias, pts_bbox_head.past_traj_reg_branches.3.4.weight, pts_bbox_head.past_traj_reg_branches.3.4.bias, pts_bbox_head.past_traj_reg_branches.4.0.weight, pts_bbox_head.past_traj_reg_branches.4.0.bias, pts_bbox_head.past_traj_reg_branches.4.2.weight, pts_bbox_head.past_traj_reg_branches.4.2.bias, pts_bbox_head.past_traj_reg_branches.4.4.weight, pts_bbox_head.past_traj_reg_branches.4.4.bias, pts_bbox_head.past_traj_reg_branches.5.0.weight, pts_bbox_head.past_traj_reg_branches.5.0.bias, pts_bbox_head.past_traj_reg_branches.5.2.weight, pts_bbox_head.past_traj_reg_branches.5.2.bias, pts_bbox_head.past_traj_reg_branches.5.4.weight, pts_bbox_head.past_traj_reg_branches.5.4.bias, query_embedding.weight, reference_points.weight, reference_points.bias, query_interact.self_attn.in_proj_weight, query_interact.self_attn.in_proj_bias, query_interact.self_attn.out_proj.weight, query_interact.self_attn.out_proj.bias, query_interact.linear1.weight, query_interact.linear1.bias, query_interact.linear2.weight, query_interact.linear2.bias, query_interact.linear_pos1.weight, query_interact.linear_pos1.bias, query_interact.linear_pos2.weight, query_interact.linear_pos2.bias, query_interact.norm_pos.weight, query_interact.norm_pos.bias, query_interact.linear_feat1.weight, query_interact.linear_feat1.bias, query_interact.linear_feat2.weight, query_interact.linear_feat2.bias, query_interact.norm_feat.weight, query_interact.norm_feat.bias, query_interact.norm1.weight, query_interact.norm1.bias, query_interact.norm2.weight, query_interact.norm2.bias, memory_bank.save_proj.weight, memory_bank.save_proj.bias, memory_bank.temporal_attn.in_proj_weight, memory_bank.temporal_attn.in_proj_bias, memory_bank.temporal_attn.out_proj.weight, memory_bank.temporal_attn.out_proj.bias, memory_bank.temporal_fc1.weight, memory_bank.temporal_fc1.bias, memory_bank.temporal_fc2.weight, memory_bank.temporal_fc2.bias, memory_bank.temporal_norm1.weight, memory_bank.temporal_norm1.bias, memory_bank.temporal_norm2.weight, memory_bank.temporal_norm2.bias, criterion.code_weights, seg_head.transformer.level_embeds, seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.0.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.0.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.0.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.0.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.0.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.0.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.0.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.0.norms.0.weight, seg_head.transformer.encoder.layers.0.norms.0.bias, seg_head.transformer.encoder.layers.0.norms.1.weight, seg_head.transformer.encoder.layers.0.norms.1.bias, seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.1.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.1.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.1.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.1.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.1.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.1.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.1.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.1.norms.0.weight, seg_head.transformer.encoder.layers.1.norms.0.bias, seg_head.transformer.encoder.layers.1.norms.1.weight, seg_head.transformer.encoder.layers.1.norms.1.bias, seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.2.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.2.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.2.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.2.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.2.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.2.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.2.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.2.norms.0.weight, seg_head.transformer.encoder.layers.2.norms.0.bias, seg_head.transformer.encoder.layers.2.norms.1.weight, seg_head.transformer.encoder.layers.2.norms.1.bias, seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.3.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.3.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.3.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.3.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.3.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.3.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.3.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.3.norms.0.weight, seg_head.transformer.encoder.layers.3.norms.0.bias, seg_head.transformer.encoder.layers.3.norms.1.weight, seg_head.transformer.encoder.layers.3.norms.1.bias, seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.4.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.4.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.4.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.4.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.4.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.4.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.4.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.4.norms.0.weight, seg_head.transformer.encoder.layers.4.norms.0.bias, seg_head.transformer.encoder.layers.4.norms.1.weight, seg_head.transformer.encoder.layers.4.norms.1.bias, seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight, seg_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias, seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight, seg_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias, seg_head.transformer.encoder.layers.5.attentions.0.value_proj.weight, seg_head.transformer.encoder.layers.5.attentions.0.value_proj.bias, seg_head.transformer.encoder.layers.5.attentions.0.output_proj.weight, seg_head.transformer.encoder.layers.5.attentions.0.output_proj.bias, seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.weight, seg_head.transformer.encoder.layers.5.ffns.0.layers.0.0.bias, seg_head.transformer.encoder.layers.5.ffns.0.layers.1.weight, seg_head.transformer.encoder.layers.5.ffns.0.layers.1.bias, seg_head.transformer.encoder.layers.5.norms.0.weight, seg_head.transformer.encoder.layers.5.norms.0.bias, seg_head.transformer.encoder.layers.5.norms.1.weight, seg_head.transformer.encoder.layers.5.norms.1.bias, seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.0.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.0.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.0.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.0.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.0.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.0.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.0.norms.0.weight, seg_head.transformer.decoder.layers.0.norms.0.bias, seg_head.transformer.decoder.layers.0.norms.1.weight, seg_head.transformer.decoder.layers.0.norms.1.bias, seg_head.transformer.decoder.layers.0.norms.2.weight, seg_head.transformer.decoder.layers.0.norms.2.bias, seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.1.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.1.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.1.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.1.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.1.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.1.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.1.norms.0.weight, seg_head.transformer.decoder.layers.1.norms.0.bias, seg_head.transformer.decoder.layers.1.norms.1.weight, seg_head.transformer.decoder.layers.1.norms.1.bias, seg_head.transformer.decoder.layers.1.norms.2.weight, seg_head.transformer.decoder.layers.1.norms.2.bias, seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.2.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.2.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.2.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.2.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.2.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.2.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.2.norms.0.weight, seg_head.transformer.decoder.layers.2.norms.0.bias, seg_head.transformer.decoder.layers.2.norms.1.weight, seg_head.transformer.decoder.layers.2.norms.1.bias, seg_head.transformer.decoder.layers.2.norms.2.weight, seg_head.transformer.decoder.layers.2.norms.2.bias, seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.3.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.3.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.3.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.3.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.3.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.3.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.3.norms.0.weight, seg_head.transformer.decoder.layers.3.norms.0.bias, seg_head.transformer.decoder.layers.3.norms.1.weight, seg_head.transformer.decoder.layers.3.norms.1.bias, seg_head.transformer.decoder.layers.3.norms.2.weight, seg_head.transformer.decoder.layers.3.norms.2.bias, seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.4.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.4.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.4.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.4.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.4.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.4.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.4.norms.0.weight, seg_head.transformer.decoder.layers.4.norms.0.bias, seg_head.transformer.decoder.layers.4.norms.1.weight, seg_head.transformer.decoder.layers.4.norms.1.bias, seg_head.transformer.decoder.layers.4.norms.2.weight, seg_head.transformer.decoder.layers.4.norms.2.bias, seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight, seg_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias, seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight, seg_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias, seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight, seg_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias, seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight, seg_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias, seg_head.transformer.decoder.layers.5.attentions.1.value_proj.weight, seg_head.transformer.decoder.layers.5.attentions.1.value_proj.bias, seg_head.transformer.decoder.layers.5.attentions.1.output_proj.weight, seg_head.transformer.decoder.layers.5.attentions.1.output_proj.bias, seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight, seg_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias, seg_head.transformer.decoder.layers.5.ffns.0.layers.1.weight, seg_head.transformer.decoder.layers.5.ffns.0.layers.1.bias, seg_head.transformer.decoder.layers.5.norms.0.weight, seg_head.transformer.decoder.layers.5.norms.0.bias, seg_head.transformer.decoder.layers.5.norms.1.weight, seg_head.transformer.decoder.layers.5.norms.1.bias, seg_head.transformer.decoder.layers.5.norms.2.weight, seg_head.transformer.decoder.layers.5.norms.2.bias, seg_head.transformer.reference_points.weight, seg_head.transformer.reference_points.bias, seg_head.bev_embedding.weight, seg_head.cls_branches.0.weight, seg_head.cls_branches.0.bias, seg_head.cls_branches.1.weight, seg_head.cls_branches.1.bias, seg_head.cls_branches.2.weight, seg_head.cls_branches.2.bias, seg_head.cls_branches.3.weight, seg_head.cls_branches.3.bias, seg_head.cls_branches.4.weight, seg_head.cls_branches.4.bias, seg_head.cls_branches.5.weight, seg_head.cls_branches.5.bias, seg_head.reg_branches.0.0.weight, seg_head.reg_branches.0.0.bias, seg_head.reg_branches.0.2.weight, seg_head.reg_branches.0.2.bias, seg_head.reg_branches.0.4.weight, seg_head.reg_branches.0.4.bias, seg_head.reg_branches.1.0.weight, seg_head.reg_branches.1.0.bias, seg_head.reg_branches.1.2.weight, seg_head.reg_branches.1.2.bias, seg_head.reg_branches.1.4.weight, seg_head.reg_branches.1.4.bias, seg_head.reg_branches.2.0.weight, seg_head.reg_branches.2.0.bias, seg_head.reg_branches.2.2.weight, seg_head.reg_branches.2.2.bias, seg_head.reg_branches.2.4.weight, seg_head.reg_branches.2.4.bias, seg_head.reg_branches.3.0.weight, seg_head.reg_branches.3.0.bias, seg_head.reg_branches.3.2.weight, seg_head.reg_branches.3.2.bias, seg_head.reg_branches.3.4.weight, seg_head.reg_branches.3.4.bias, seg_head.reg_branches.4.0.weight, seg_head.reg_branches.4.0.bias, seg_head.reg_branches.4.2.weight, seg_head.reg_branches.4.2.bias, seg_head.reg_branches.4.4.weight, seg_head.reg_branches.4.4.bias, seg_head.reg_branches.5.0.weight, seg_head.reg_branches.5.0.bias, seg_head.reg_branches.5.2.weight, seg_head.reg_branches.5.2.bias, seg_head.reg_branches.5.4.weight, seg_head.reg_branches.5.4.bias, seg_head.query_embedding.weight, seg_head.stuff_query.weight, seg_head.reg_branches2.0.0.weight, seg_head.reg_branches2.0.0.bias, seg_head.reg_branches2.0.2.weight, seg_head.reg_branches2.0.2.bias, seg_head.reg_branches2.0.4.weight, seg_head.reg_branches2.0.4.bias, seg_head.reg_branches2.1.0.weight, seg_head.reg_branches2.1.0.bias, seg_head.reg_branches2.1.2.weight, seg_head.reg_branches2.1.2.bias, seg_head.reg_branches2.1.4.weight, seg_head.reg_branches2.1.4.bias, seg_head.reg_branches2.2.0.weight, seg_head.reg_branches2.2.0.bias, seg_head.reg_branches2.2.2.weight, seg_head.reg_branches2.2.2.bias, seg_head.reg_branches2.2.4.weight, seg_head.reg_branches2.2.4.bias, seg_head.reg_branches2.3.0.weight, seg_head.reg_branches2.3.0.bias, seg_head.reg_branches2.3.2.weight, seg_head.reg_branches2.3.2.bias, seg_head.reg_branches2.3.4.weight, seg_head.reg_branches2.3.4.bias, seg_head.cls_thing_branches.0.weight, seg_head.cls_thing_branches.0.bias, seg_head.cls_thing_branches.1.weight, seg_head.cls_thing_branches.1.bias, seg_head.cls_thing_branches.2.weight, seg_head.cls_thing_branches.2.bias, seg_head.cls_thing_branches.3.weight, seg_head.cls_thing_branches.3.bias, seg_head.cls_stuff_branches.0.weight, seg_head.cls_stuff_branches.0.bias, seg_head.cls_stuff_branches.1.weight, seg_head.cls_stuff_branches.1.bias, seg_head.cls_stuff_branches.2.weight, seg_head.cls_stuff_branches.2.bias, seg_head.cls_stuff_branches.3.weight, seg_head.cls_stuff_branches.3.bias, seg_head.cls_stuff_branches.4.weight, seg_head.cls_stuff_branches.4.bias, seg_head.cls_stuff_branches.5.weight, seg_head.cls_stuff_branches.5.bias, seg_head.things_mask_head.blocks.0.head_norm1.weight, seg_head.things_mask_head.blocks.0.head_norm1.bias, seg_head.things_mask_head.blocks.0.attn.q.weight, seg_head.things_mask_head.blocks.0.attn.q.bias, seg_head.things_mask_head.blocks.0.attn.k.weight, seg_head.things_mask_head.blocks.0.attn.k.bias, seg_head.things_mask_head.blocks.0.attn.v.weight, seg_head.things_mask_head.blocks.0.attn.v.bias, seg_head.things_mask_head.blocks.0.attn.proj.weight, seg_head.things_mask_head.blocks.0.attn.proj.bias, seg_head.things_mask_head.blocks.0.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.0.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.0.attn.linear.0.weight, seg_head.things_mask_head.blocks.0.attn.linear.0.bias, seg_head.things_mask_head.blocks.0.head_norm2.weight, seg_head.things_mask_head.blocks.0.head_norm2.bias, seg_head.things_mask_head.blocks.0.mlp.fc1.weight, seg_head.things_mask_head.blocks.0.mlp.fc1.bias, seg_head.things_mask_head.blocks.0.mlp.fc2.weight, seg_head.things_mask_head.blocks.0.mlp.fc2.bias, seg_head.things_mask_head.blocks.1.head_norm1.weight, seg_head.things_mask_head.blocks.1.head_norm1.bias, seg_head.things_mask_head.blocks.1.attn.q.weight, seg_head.things_mask_head.blocks.1.attn.q.bias, seg_head.things_mask_head.blocks.1.attn.k.weight, seg_head.things_mask_head.blocks.1.attn.k.bias, seg_head.things_mask_head.blocks.1.attn.v.weight, seg_head.things_mask_head.blocks.1.attn.v.bias, seg_head.things_mask_head.blocks.1.attn.proj.weight, seg_head.things_mask_head.blocks.1.attn.proj.bias, seg_head.things_mask_head.blocks.1.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.1.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.1.attn.linear.0.weight, seg_head.things_mask_head.blocks.1.attn.linear.0.bias, seg_head.things_mask_head.blocks.1.head_norm2.weight, seg_head.things_mask_head.blocks.1.head_norm2.bias, seg_head.things_mask_head.blocks.1.mlp.fc1.weight, seg_head.things_mask_head.blocks.1.mlp.fc1.bias, seg_head.things_mask_head.blocks.1.mlp.fc2.weight, seg_head.things_mask_head.blocks.1.mlp.fc2.bias, seg_head.things_mask_head.blocks.2.head_norm1.weight, seg_head.things_mask_head.blocks.2.head_norm1.bias, seg_head.things_mask_head.blocks.2.attn.q.weight, seg_head.things_mask_head.blocks.2.attn.q.bias, seg_head.things_mask_head.blocks.2.attn.k.weight, seg_head.things_mask_head.blocks.2.attn.k.bias, seg_head.things_mask_head.blocks.2.attn.v.weight, seg_head.things_mask_head.blocks.2.attn.v.bias, seg_head.things_mask_head.blocks.2.attn.proj.weight, seg_head.things_mask_head.blocks.2.attn.proj.bias, seg_head.things_mask_head.blocks.2.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.2.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.2.attn.linear.0.weight, seg_head.things_mask_head.blocks.2.attn.linear.0.bias, seg_head.things_mask_head.blocks.2.head_norm2.weight, seg_head.things_mask_head.blocks.2.head_norm2.bias, seg_head.things_mask_head.blocks.2.mlp.fc1.weight, seg_head.things_mask_head.blocks.2.mlp.fc1.bias, seg_head.things_mask_head.blocks.2.mlp.fc2.weight, seg_head.things_mask_head.blocks.2.mlp.fc2.bias, seg_head.things_mask_head.blocks.3.head_norm1.weight, seg_head.things_mask_head.blocks.3.head_norm1.bias, seg_head.things_mask_head.blocks.3.attn.q.weight, seg_head.things_mask_head.blocks.3.attn.q.bias, seg_head.things_mask_head.blocks.3.attn.k.weight, seg_head.things_mask_head.blocks.3.attn.k.bias, seg_head.things_mask_head.blocks.3.attn.v.weight, seg_head.things_mask_head.blocks.3.attn.v.bias, seg_head.things_mask_head.blocks.3.attn.proj.weight, seg_head.things_mask_head.blocks.3.attn.proj.bias, seg_head.things_mask_head.blocks.3.attn.linear_l1.0.weight, seg_head.things_mask_head.blocks.3.attn.linear_l1.0.bias, seg_head.things_mask_head.blocks.3.attn.linear.0.weight, seg_head.things_mask_head.blocks.3.attn.linear.0.bias, seg_head.things_mask_head.blocks.3.head_norm2.weight, seg_head.things_mask_head.blocks.3.head_norm2.bias, seg_head.things_mask_head.blocks.3.mlp.fc1.weight, seg_head.things_mask_head.blocks.3.mlp.fc1.bias, seg_head.things_mask_head.blocks.3.mlp.fc2.weight, seg_head.things_mask_head.blocks.3.mlp.fc2.bias, seg_head.things_mask_head.attnen.q.weight, seg_head.things_mask_head.attnen.q.bias, seg_head.things_mask_head.attnen.k.weight, seg_head.things_mask_head.attnen.k.bias, seg_head.things_mask_head.attnen.linear_l1.0.weight, seg_head.things_mask_head.attnen.linear_l1.0.bias, seg_head.things_mask_head.attnen.linear.0.weight, seg_head.things_mask_head.attnen.linear.0.bias, seg_head.stuff_mask_head.blocks.0.head_norm1.weight, seg_head.stuff_mask_head.blocks.0.head_norm1.bias, seg_head.stuff_mask_head.blocks.0.attn.q.weight, seg_head.stuff_mask_head.blocks.0.attn.q.bias, seg_head.stuff_mask_head.blocks.0.attn.k.weight, seg_head.stuff_mask_head.blocks.0.attn.k.bias, seg_head.stuff_mask_head.blocks.0.attn.v.weight, seg_head.stuff_mask_head.blocks.0.attn.v.bias, seg_head.stuff_mask_head.blocks.0.attn.proj.weight, seg_head.stuff_mask_head.blocks.0.attn.proj.bias, seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.0.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.0.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.0.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.0.head_norm2.weight, seg_head.stuff_mask_head.blocks.0.head_norm2.bias, seg_head.stuff_mask_head.blocks.0.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.0.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.0.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.0.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.0.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.0.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.0.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.0.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.0.norm3.weight, seg_head.stuff_mask_head.blocks.0.norm3.bias, seg_head.stuff_mask_head.blocks.1.head_norm1.weight, seg_head.stuff_mask_head.blocks.1.head_norm1.bias, seg_head.stuff_mask_head.blocks.1.attn.q.weight, seg_head.stuff_mask_head.blocks.1.attn.q.bias, seg_head.stuff_mask_head.blocks.1.attn.k.weight, seg_head.stuff_mask_head.blocks.1.attn.k.bias, seg_head.stuff_mask_head.blocks.1.attn.v.weight, seg_head.stuff_mask_head.blocks.1.attn.v.bias, seg_head.stuff_mask_head.blocks.1.attn.proj.weight, seg_head.stuff_mask_head.blocks.1.attn.proj.bias, seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.1.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.1.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.1.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.1.head_norm2.weight, seg_head.stuff_mask_head.blocks.1.head_norm2.bias, seg_head.stuff_mask_head.blocks.1.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.1.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.1.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.1.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.1.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.1.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.1.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.1.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.1.norm3.weight, seg_head.stuff_mask_head.blocks.1.norm3.bias, seg_head.stuff_mask_head.blocks.2.head_norm1.weight, seg_head.stuff_mask_head.blocks.2.head_norm1.bias, seg_head.stuff_mask_head.blocks.2.attn.q.weight, seg_head.stuff_mask_head.blocks.2.attn.q.bias, seg_head.stuff_mask_head.blocks.2.attn.k.weight, seg_head.stuff_mask_head.blocks.2.attn.k.bias, seg_head.stuff_mask_head.blocks.2.attn.v.weight, seg_head.stuff_mask_head.blocks.2.attn.v.bias, seg_head.stuff_mask_head.blocks.2.attn.proj.weight, seg_head.stuff_mask_head.blocks.2.attn.proj.bias, seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.2.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.2.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.2.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.2.head_norm2.weight, seg_head.stuff_mask_head.blocks.2.head_norm2.bias, seg_head.stuff_mask_head.blocks.2.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.2.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.2.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.2.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.2.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.2.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.2.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.2.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.2.norm3.weight, seg_head.stuff_mask_head.blocks.2.norm3.bias, seg_head.stuff_mask_head.blocks.3.head_norm1.weight, seg_head.stuff_mask_head.blocks.3.head_norm1.bias, seg_head.stuff_mask_head.blocks.3.attn.q.weight, seg_head.stuff_mask_head.blocks.3.attn.q.bias, seg_head.stuff_mask_head.blocks.3.attn.k.weight, seg_head.stuff_mask_head.blocks.3.attn.k.bias, seg_head.stuff_mask_head.blocks.3.attn.v.weight, seg_head.stuff_mask_head.blocks.3.attn.v.bias, seg_head.stuff_mask_head.blocks.3.attn.proj.weight, seg_head.stuff_mask_head.blocks.3.attn.proj.bias, seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.3.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.3.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.3.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.3.head_norm2.weight, seg_head.stuff_mask_head.blocks.3.head_norm2.bias, seg_head.stuff_mask_head.blocks.3.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.3.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.3.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.3.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.3.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.3.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.3.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.3.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.3.norm3.weight, seg_head.stuff_mask_head.blocks.3.norm3.bias, seg_head.stuff_mask_head.blocks.4.head_norm1.weight, seg_head.stuff_mask_head.blocks.4.head_norm1.bias, seg_head.stuff_mask_head.blocks.4.attn.q.weight, seg_head.stuff_mask_head.blocks.4.attn.q.bias, seg_head.stuff_mask_head.blocks.4.attn.k.weight, seg_head.stuff_mask_head.blocks.4.attn.k.bias, seg_head.stuff_mask_head.blocks.4.attn.v.weight, seg_head.stuff_mask_head.blocks.4.attn.v.bias, seg_head.stuff_mask_head.blocks.4.attn.proj.weight, seg_head.stuff_mask_head.blocks.4.attn.proj.bias, seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.4.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.4.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.4.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.4.head_norm2.weight, seg_head.stuff_mask_head.blocks.4.head_norm2.bias, seg_head.stuff_mask_head.blocks.4.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.4.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.4.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.4.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.4.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.4.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.4.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.4.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.4.norm3.weight, seg_head.stuff_mask_head.blocks.4.norm3.bias, seg_head.stuff_mask_head.blocks.5.head_norm1.weight, seg_head.stuff_mask_head.blocks.5.head_norm1.bias, seg_head.stuff_mask_head.blocks.5.attn.q.weight, seg_head.stuff_mask_head.blocks.5.attn.q.bias, seg_head.stuff_mask_head.blocks.5.attn.k.weight, seg_head.stuff_mask_head.blocks.5.attn.k.bias, seg_head.stuff_mask_head.blocks.5.attn.v.weight, seg_head.stuff_mask_head.blocks.5.attn.v.bias, seg_head.stuff_mask_head.blocks.5.attn.proj.weight, seg_head.stuff_mask_head.blocks.5.attn.proj.bias, seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.weight, seg_head.stuff_mask_head.blocks.5.attn.linear_l1.0.bias, seg_head.stuff_mask_head.blocks.5.attn.linear.0.weight, seg_head.stuff_mask_head.blocks.5.attn.linear.0.bias, seg_head.stuff_mask_head.blocks.5.head_norm2.weight, seg_head.stuff_mask_head.blocks.5.head_norm2.bias, seg_head.stuff_mask_head.blocks.5.mlp.fc1.weight, seg_head.stuff_mask_head.blocks.5.mlp.fc1.bias, seg_head.stuff_mask_head.blocks.5.mlp.fc2.weight, seg_head.stuff_mask_head.blocks.5.mlp.fc2.bias, seg_head.stuff_mask_head.blocks.5.self_attention.qkv.weight, seg_head.stuff_mask_head.blocks.5.self_attention.qkv.bias, seg_head.stuff_mask_head.blocks.5.self_attention.proj.weight, seg_head.stuff_mask_head.blocks.5.self_attention.proj.bias, seg_head.stuff_mask_head.blocks.5.norm3.weight, seg_head.stuff_mask_head.blocks.5.norm3.bias, seg_head.stuff_mask_head.attnen.q.weight, seg_head.stuff_mask_head.attnen.q.bias, seg_head.stuff_mask_head.attnen.k.weight, seg_head.stuff_mask_head.attnen.k.bias, seg_head.stuff_mask_head.attnen.linear_l1.0.weight, seg_head.stuff_mask_head.attnen.linear_l1.0.bias, seg_head.stuff_mask_head.attnen.linear.0.weight, seg_head.stuff_mask_head.attnen.linear.0.bias

2025-05-20 09:44:46,123 - mmdet - INFO - Start running, host: liuji@hjbog-srdc-20.amd.com, work_dir: /mnt/raid0/liuji/UniAD/projects/work_dirs/stage1_track_map/base_track_map
2025-05-20 09:44:46,124 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-05-20 09:44:46,125 - mmdet - INFO - workflow: [('train', 1)], max: 6 epochs
2025-05-20 09:44:46,126 - mmdet - INFO - Checkpoints will be saved to /mnt/raid0/liuji/UniAD/projects/work_dirs/stage1_track_map/base_track_map by HardDiskBackend.
2025-05-20 09:47:17,281 - mmdet - INFO - Epoch [1][10/7033]	lr: 6.907e-05, eta: 7 days, 9:07:19, time: 15.114, data_time: 1.259, memory: 47320, track.frame_0_loss_cls_0: 1.0991, track.frame_0_loss_bbox_0: 1.7652, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.9974, track.frame_0_loss_bbox_1: 1.6755, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.9827, track.frame_0_loss_bbox_2: 1.6746, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.9496, track.frame_0_loss_bbox_3: 1.6566, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.9741, track.frame_0_loss_bbox_4: 1.6454, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.9652, track.frame_0_loss_bbox_5: 1.6460, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 1.3125, track.frame_1_loss_bbox_0: 1.7758, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 1.1743, track.frame_1_loss_bbox_1: 1.6972, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 1.1376, track.frame_1_loss_bbox_2: 1.6651, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 1.1114, track.frame_1_loss_bbox_3: 1.6530, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 1.1392, track.frame_1_loss_bbox_4: 1.6339, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 1.1035, track.frame_1_loss_bbox_5: 1.6284, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 1.2631, track.frame_2_loss_bbox_0: 1.7763, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 1.1788, track.frame_2_loss_bbox_1: 1.6910, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 1.1430, track.frame_2_loss_bbox_2: 1.6604, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 1.1252, track.frame_2_loss_bbox_3: 1.6385, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 1.1708, track.frame_2_loss_bbox_4: 1.6179, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 1.1544, track.frame_2_loss_bbox_5: 1.6162, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 1.3643, track.frame_3_loss_bbox_0: 1.9789, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 1.2118, track.frame_3_loss_bbox_1: 1.9036, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 1.1955, track.frame_3_loss_bbox_2: 1.8596, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 1.1635, track.frame_3_loss_bbox_3: 1.8339, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 1.1636, track.frame_3_loss_bbox_4: 1.8354, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 1.1530, track.frame_3_loss_bbox_5: 1.8169, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 1.3720, track.frame_4_loss_bbox_0: 1.8038, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 1.2250, track.frame_4_loss_bbox_1: 1.7322, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 1.2712, track.frame_4_loss_bbox_2: 1.6859, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 1.2222, track.frame_4_loss_bbox_3: 1.6700, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 1.2342, track.frame_4_loss_bbox_4: 1.6526, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 1.2026, track.frame_4_loss_bbox_5: 1.6669, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 1.2133, map.loss_bbox: 1.6234, map.loss_iou: 1.9185, map.loss_mask_things: 1.8406, map.loss_mask_stuff: 0.0526, map.d0.loss_mask_things_f: 1.8541, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.8448, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.8396, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.8438, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0491, map.d0.loss_cls_stuff_f: 0.0781, map.d1.loss_mask_stuff_f: 0.0737, map.d1.loss_cls_stuff_f: 0.0738, map.d2.loss_mask_stuff_f: 0.0466, map.d2.loss_cls_stuff_f: 0.0669, map.d3.loss_mask_stuff_f: 0.0511, map.d3.loss_cls_stuff_f: 0.0583, map.d4.loss_mask_stuff_f: 0.0487, map.d4.loss_cls_stuff_f: 0.0714, map.d5.loss_mask_stuff_f: 0.0531, map.d5.loss_cls_stuff_f: 0.0801, map.d0.loss_cls: 1.7610, map.d0.loss_bbox: 1.6554, map.d0.loss_iou: 1.9406, map.d1.loss_cls: 1.5982, map.d1.loss_bbox: 1.6479, map.d1.loss_iou: 1.9345, map.d2.loss_cls: 1.2953, map.d2.loss_bbox: 1.6342, map.d2.loss_iou: 1.9262, map.d3.loss_cls: 1.2127, map.d3.loss_bbox: 1.6264, map.d3.loss_iou: 1.9216, map.d4.loss_cls: 1.2599, map.d4.loss_bbox: 1.6234, map.d4.loss_iou: 1.9213, loss: 126.0581, grad_norm: 1094.2915
2025-05-20 09:49:22,341 - mmdet - INFO - Epoch [1][20/7033]	lr: 7.173e-05, eta: 6 days, 17:47:20, time: 12.504, data_time: 0.198, memory: 47382, track.frame_0_loss_cls_0: 0.6171, track.frame_0_loss_bbox_0: 1.5648, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.6019, track.frame_0_loss_bbox_1: 1.4866, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.5890, track.frame_0_loss_bbox_2: 1.4437, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.5809, track.frame_0_loss_bbox_3: 1.4262, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.5923, track.frame_0_loss_bbox_4: 1.4063, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.5904, track.frame_0_loss_bbox_5: 1.4121, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.6580, track.frame_1_loss_bbox_0: 1.5175, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.6265, track.frame_1_loss_bbox_1: 1.4406, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.6174, track.frame_1_loss_bbox_2: 1.4077, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.6092, track.frame_1_loss_bbox_3: 1.3889, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.6106, track.frame_1_loss_bbox_4: 1.3782, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.6158, track.frame_1_loss_bbox_5: 1.3744, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.6409, track.frame_2_loss_bbox_0: 1.5279, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.6266, track.frame_2_loss_bbox_1: 1.4422, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.6054, track.frame_2_loss_bbox_2: 1.4165, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.5961, track.frame_2_loss_bbox_3: 1.3989, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.5983, track.frame_2_loss_bbox_4: 1.3847, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.5975, track.frame_2_loss_bbox_5: 1.3852, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.6078, track.frame_3_loss_bbox_0: 1.4335, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.6049, track.frame_3_loss_bbox_1: 1.3484, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.5852, track.frame_3_loss_bbox_2: 1.3125, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.5841, track.frame_3_loss_bbox_3: 1.2964, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.5816, track.frame_3_loss_bbox_4: 1.2812, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.5836, track.frame_3_loss_bbox_5: 1.2823, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.6220, track.frame_4_loss_bbox_0: 1.4299, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.5898, track.frame_4_loss_bbox_1: 1.3559, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.5884, track.frame_4_loss_bbox_2: 1.3095, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.5738, track.frame_4_loss_bbox_3: 1.2960, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.5701, track.frame_4_loss_bbox_4: 1.2829, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.5727, track.frame_4_loss_bbox_5: 1.2863, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8715, map.loss_bbox: 1.5779, map.loss_iou: 1.9268, map.loss_mask_things: 1.7979, map.loss_mask_stuff: 0.0426, map.d0.loss_mask_things_f: 1.8336, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.8159, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7967, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7987, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0438, map.d0.loss_cls_stuff_f: 0.0016, map.d1.loss_mask_stuff_f: 0.0483, map.d1.loss_cls_stuff_f: 0.0007, map.d2.loss_mask_stuff_f: 0.0417, map.d2.loss_cls_stuff_f: 0.0004, map.d3.loss_mask_stuff_f: 0.0420, map.d3.loss_cls_stuff_f: 0.0002, map.d4.loss_mask_stuff_f: 0.0432, map.d4.loss_cls_stuff_f: 0.0003, map.d5.loss_mask_stuff_f: 0.0441, map.d5.loss_cls_stuff_f: 0.0003, map.d0.loss_cls: 1.3716, map.d0.loss_bbox: 1.6381, map.d0.loss_iou: 1.9614, map.d1.loss_cls: 0.9502, map.d1.loss_bbox: 1.6197, map.d1.loss_iou: 1.9497, map.d2.loss_cls: 0.8595, map.d2.loss_bbox: 1.6012, map.d2.loss_iou: 1.9352, map.d3.loss_cls: 0.8614, map.d3.loss_bbox: 1.5890, map.d3.loss_iou: 1.9317, map.d4.loss_cls: 0.8620, map.d4.loss_bbox: 1.5865, map.d4.loss_iou: 1.9304, loss: 96.1312, grad_norm: 150.8910
2025-05-20 09:51:24,527 - mmdet - INFO - Epoch [1][30/7033]	lr: 7.440e-05, eta: 6 days, 11:32:51, time: 12.220, data_time: 0.134, memory: 47382, track.frame_0_loss_cls_0: 0.5609, track.frame_0_loss_bbox_0: 1.4884, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.5603, track.frame_0_loss_bbox_1: 1.3547, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.5563, track.frame_0_loss_bbox_2: 1.3228, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.5456, track.frame_0_loss_bbox_3: 1.3128, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.5416, track.frame_0_loss_bbox_4: 1.3025, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.5481, track.frame_0_loss_bbox_5: 1.2980, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.5709, track.frame_1_loss_bbox_0: 1.3881, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.5659, track.frame_1_loss_bbox_1: 1.2830, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.5602, track.frame_1_loss_bbox_2: 1.2515, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.5503, track.frame_1_loss_bbox_3: 1.2264, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.5482, track.frame_1_loss_bbox_4: 1.2158, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.5503, track.frame_1_loss_bbox_5: 1.2068, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.5323, track.frame_2_loss_bbox_0: 1.3160, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.5385, track.frame_2_loss_bbox_1: 1.2234, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.5260, track.frame_2_loss_bbox_2: 1.1888, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.5162, track.frame_2_loss_bbox_3: 1.1695, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.5162, track.frame_2_loss_bbox_4: 1.1579, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.5186, track.frame_2_loss_bbox_5: 1.1471, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.5332, track.frame_3_loss_bbox_0: 1.4151, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.5253, track.frame_3_loss_bbox_1: 1.3200, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.5043, track.frame_3_loss_bbox_2: 1.2899, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.4855, track.frame_3_loss_bbox_3: 1.2721, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.4837, track.frame_3_loss_bbox_4: 1.2592, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.4866, track.frame_3_loss_bbox_5: 1.2547, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.5257, track.frame_4_loss_bbox_0: 1.2761, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.5115, track.frame_4_loss_bbox_1: 1.1879, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.4961, track.frame_4_loss_bbox_2: 1.1641, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.4806, track.frame_4_loss_bbox_3: 1.1563, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.4815, track.frame_4_loss_bbox_4: 1.1472, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.4870, track.frame_4_loss_bbox_5: 1.1371, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8760, map.loss_bbox: 1.6133, map.loss_iou: 1.9834, map.loss_mask_things: 1.7841, map.loss_mask_stuff: 0.0392, map.d0.loss_mask_things_f: 1.8067, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7994, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7754, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7799, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0398, map.d0.loss_cls_stuff_f: 0.0001, map.d1.loss_mask_stuff_f: 0.0404, map.d1.loss_cls_stuff_f: 0.0001, map.d2.loss_mask_stuff_f: 0.0376, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0394, map.d3.loss_cls_stuff_f: 0.0001, map.d4.loss_mask_stuff_f: 0.0393, map.d4.loss_cls_stuff_f: 0.0001, map.d5.loss_mask_stuff_f: 0.0399, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 1.0162, map.d0.loss_bbox: 1.6776, map.d0.loss_iou: 2.0087, map.d1.loss_cls: 0.8277, map.d1.loss_bbox: 1.6494, map.d1.loss_iou: 1.9928, map.d2.loss_cls: 0.8670, map.d2.loss_bbox: 1.6255, map.d2.loss_iou: 1.9829, map.d3.loss_cls: 0.8740, map.d3.loss_bbox: 1.6234, map.d3.loss_iou: 1.9801, map.d4.loss_cls: 0.8611, map.d4.loss_bbox: 1.6218, map.d4.loss_iou: 1.9826, loss: 89.8257, grad_norm: 130.3522
2025-05-20 09:53:40,105 - mmdet - INFO - Epoch [1][40/7033]	lr: 7.707e-05, eta: 6 days, 12:19:33, time: 13.558, data_time: 0.142, memory: 47425, track.frame_0_loss_cls_0: 0.5045, track.frame_0_loss_bbox_0: 1.2964, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.4922, track.frame_0_loss_bbox_1: 1.1884, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.4819, track.frame_0_loss_bbox_2: 1.1469, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.4659, track.frame_0_loss_bbox_3: 1.1379, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.4590, track.frame_0_loss_bbox_4: 1.1278, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.4676, track.frame_0_loss_bbox_5: 1.1219, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.4980, track.frame_1_loss_bbox_0: 1.2644, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.4906, track.frame_1_loss_bbox_1: 1.1756, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.4707, track.frame_1_loss_bbox_2: 1.1385, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.4522, track.frame_1_loss_bbox_3: 1.1250, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.4484, track.frame_1_loss_bbox_4: 1.1116, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.4510, track.frame_1_loss_bbox_5: 1.1080, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.4697, track.frame_2_loss_bbox_0: 1.1661, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.4699, track.frame_2_loss_bbox_1: 1.0619, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.4535, track.frame_2_loss_bbox_2: 1.0406, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.4362, track.frame_2_loss_bbox_3: 1.0331, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.4307, track.frame_2_loss_bbox_4: 1.0245, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.4348, track.frame_2_loss_bbox_5: 1.0150, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.4586, track.frame_3_loss_bbox_0: 1.1577, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.4611, track.frame_3_loss_bbox_1: 1.0568, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.4421, track.frame_3_loss_bbox_2: 1.0312, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.4236, track.frame_3_loss_bbox_3: 1.0252, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.4200, track.frame_3_loss_bbox_4: 1.0139, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.4234, track.frame_3_loss_bbox_5: 1.0098, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.4623, track.frame_4_loss_bbox_0: 1.1036, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.4563, track.frame_4_loss_bbox_1: 1.0072, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.4409, track.frame_4_loss_bbox_2: 0.9846, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.4243, track.frame_4_loss_bbox_3: 0.9828, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.4178, track.frame_4_loss_bbox_4: 0.9788, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.4261, track.frame_4_loss_bbox_5: 0.9689, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8924, map.loss_bbox: 1.7460, map.loss_iou: 1.9655, map.loss_mask_things: 1.7381, map.loss_mask_stuff: 0.0388, map.d0.loss_mask_things_f: 1.7720, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7607, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7336, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7458, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0382, map.d0.loss_cls_stuff_f: 0.0001, map.d1.loss_mask_stuff_f: 0.0377, map.d1.loss_cls_stuff_f: 0.0001, map.d2.loss_mask_stuff_f: 0.0356, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0386, map.d3.loss_cls_stuff_f: 0.0001, map.d4.loss_mask_stuff_f: 0.0368, map.d4.loss_cls_stuff_f: 0.0001, map.d5.loss_mask_stuff_f: 0.0365, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 0.8226, map.d0.loss_bbox: 1.8329, map.d0.loss_iou: 2.0259, map.d1.loss_cls: 0.8340, map.d1.loss_bbox: 1.8025, map.d1.loss_iou: 2.0047, map.d2.loss_cls: 0.8497, map.d2.loss_bbox: 1.7693, map.d2.loss_iou: 1.9897, map.d3.loss_cls: 0.8750, map.d3.loss_bbox: 1.7563, map.d3.loss_iou: 1.9764, map.d4.loss_cls: 0.9124, map.d4.loss_bbox: 1.7499, map.d4.loss_iou: 1.9704, loss: 83.0263, grad_norm: 130.8975
2025-05-20 09:55:41,142 - mmdet - INFO - Epoch [1][50/7033]	lr: 7.973e-05, eta: 6 days, 9:22:15, time: 12.103, data_time: 0.153, memory: 47425, track.frame_0_loss_cls_0: 0.4843, track.frame_0_loss_bbox_0: 1.0931, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.4652, track.frame_0_loss_bbox_1: 0.9317, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.4376, track.frame_0_loss_bbox_2: 0.8942, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.4154, track.frame_0_loss_bbox_3: 0.8940, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.4135, track.frame_0_loss_bbox_4: 0.8817, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.4177, track.frame_0_loss_bbox_5: 0.8769, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.4583, track.frame_1_loss_bbox_0: 1.1117, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.4471, track.frame_1_loss_bbox_1: 0.9694, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.4130, track.frame_1_loss_bbox_2: 0.9312, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.3887, track.frame_1_loss_bbox_3: 0.9232, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.3958, track.frame_1_loss_bbox_4: 0.9069, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.4020, track.frame_1_loss_bbox_5: 0.9058, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.4522, track.frame_2_loss_bbox_0: 1.0610, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.4302, track.frame_2_loss_bbox_1: 0.9336, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.4063, track.frame_2_loss_bbox_2: 0.8947, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.3892, track.frame_2_loss_bbox_3: 0.8880, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.3829, track.frame_2_loss_bbox_4: 0.8818, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.3848, track.frame_2_loss_bbox_5: 0.8792, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.4230, track.frame_3_loss_bbox_0: 1.0014, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.4101, track.frame_3_loss_bbox_1: 0.8508, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.3773, track.frame_3_loss_bbox_2: 0.8234, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.3615, track.frame_3_loss_bbox_3: 0.8132, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.3615, track.frame_3_loss_bbox_4: 0.8048, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.3642, track.frame_3_loss_bbox_5: 0.8012, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.4239, track.frame_4_loss_bbox_0: 1.0081, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.4127, track.frame_4_loss_bbox_1: 0.8620, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.3851, track.frame_4_loss_bbox_2: 0.8174, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.3646, track.frame_4_loss_bbox_3: 0.8061, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.3595, track.frame_4_loss_bbox_4: 0.8014, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.3653, track.frame_4_loss_bbox_5: 0.7957, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8793, map.loss_bbox: 1.7077, map.loss_iou: 1.9971, map.loss_mask_things: 1.7410, map.loss_mask_stuff: 0.0301, map.d0.loss_mask_things_f: 1.7759, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7628, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7426, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7565, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0314, map.d0.loss_cls_stuff_f: 0.0001, map.d1.loss_mask_stuff_f: 0.0316, map.d1.loss_cls_stuff_f: 0.0001, map.d2.loss_mask_stuff_f: 0.0289, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0311, map.d3.loss_cls_stuff_f: 0.0001, map.d4.loss_mask_stuff_f: 0.0298, map.d4.loss_cls_stuff_f: 0.0001, map.d5.loss_mask_stuff_f: 0.0304, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 0.7911, map.d0.loss_bbox: 1.7766, map.d0.loss_iou: 2.0389, map.d1.loss_cls: 0.7921, map.d1.loss_bbox: 1.7485, map.d1.loss_iou: 2.0192, map.d2.loss_cls: 0.8297, map.d2.loss_bbox: 1.7300, map.d2.loss_iou: 2.0051, map.d3.loss_cls: 0.8566, map.d3.loss_bbox: 1.7155, map.d3.loss_iou: 2.0004, map.d4.loss_cls: 0.8694, map.d4.loss_bbox: 1.7139, map.d4.loss_iou: 1.9960, loss: 75.6962, grad_norm: 184.5832
2025-05-20 09:58:24,083 - mmdet - INFO - Epoch [1][60/7033]	lr: 8.240e-05, eta: 6 days, 15:34:02, time: 16.295, data_time: 0.141, memory: 47425, track.frame_0_loss_cls_0: 0.4475, track.frame_0_loss_bbox_0: 1.0416, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.4223, track.frame_0_loss_bbox_1: 0.9262, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.4052, track.frame_0_loss_bbox_2: 0.8830, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.3860, track.frame_0_loss_bbox_3: 0.8802, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.3803, track.frame_0_loss_bbox_4: 0.8704, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.3881, track.frame_0_loss_bbox_5: 0.8640, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.4041, track.frame_1_loss_bbox_0: 0.9519, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.3890, track.frame_1_loss_bbox_1: 0.8783, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.3704, track.frame_1_loss_bbox_2: 0.8472, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.3558, track.frame_1_loss_bbox_3: 0.8406, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.3550, track.frame_1_loss_bbox_4: 0.8321, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.3631, track.frame_1_loss_bbox_5: 0.8239, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.3875, track.frame_2_loss_bbox_0: 0.9247, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.3770, track.frame_2_loss_bbox_1: 0.8287, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.3635, track.frame_2_loss_bbox_2: 0.8061, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.3416, track.frame_2_loss_bbox_3: 0.8049, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.3420, track.frame_2_loss_bbox_4: 0.7943, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.3468, track.frame_2_loss_bbox_5: 0.7900, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.3857, track.frame_3_loss_bbox_0: 0.9202, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.3670, track.frame_3_loss_bbox_1: 0.8375, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.3479, track.frame_3_loss_bbox_2: 0.8100, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.3326, track.frame_3_loss_bbox_3: 0.8071, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.3335, track.frame_3_loss_bbox_4: 0.8020, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.3413, track.frame_3_loss_bbox_5: 0.7986, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.3911, track.frame_4_loss_bbox_0: 0.8881, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.3678, track.frame_4_loss_bbox_1: 0.7992, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.3558, track.frame_4_loss_bbox_2: 0.7853, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.3464, track.frame_4_loss_bbox_3: 0.7825, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.3443, track.frame_4_loss_bbox_4: 0.7727, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.3495, track.frame_4_loss_bbox_5: 0.7687, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8745, map.loss_bbox: 1.6680, map.loss_iou: 1.9340, map.loss_mask_things: 1.7512, map.loss_mask_stuff: 0.0360, map.d0.loss_mask_things_f: 1.7833, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7712, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7550, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7702, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0341, map.d0.loss_cls_stuff_f: 0.0001, map.d1.loss_mask_stuff_f: 0.0333, map.d1.loss_cls_stuff_f: 0.0001, map.d2.loss_mask_stuff_f: 0.0334, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0344, map.d3.loss_cls_stuff_f: 0.0001, map.d4.loss_mask_stuff_f: 0.0334, map.d4.loss_cls_stuff_f: 0.0001, map.d5.loss_mask_stuff_f: 0.0349, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 0.7739, map.d0.loss_bbox: 1.6959, map.d0.loss_iou: 1.9408, map.d1.loss_cls: 0.7835, map.d1.loss_bbox: 1.6755, map.d1.loss_iou: 1.9210, map.d2.loss_cls: 0.8241, map.d2.loss_bbox: 1.6704, map.d2.loss_iou: 1.9159, map.d3.loss_cls: 0.8665, map.d3.loss_bbox: 1.6577, map.d3.loss_iou: 1.9158, map.d4.loss_cls: 0.8591, map.d4.loss_bbox: 1.6593, map.d4.loss_iou: 1.9269, loss: 72.0821, grad_norm: 133.2936
2025-05-20 10:00:34,718 - mmdet - INFO - Epoch [1][70/7033]	lr: 8.507e-05, eta: 6 days, 14:34:38, time: 13.063, data_time: 0.165, memory: 47425, track.frame_0_loss_cls_0: 0.4613, track.frame_0_loss_bbox_0: 1.0568, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.4317, track.frame_0_loss_bbox_1: 0.9393, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.4069, track.frame_0_loss_bbox_2: 0.9079, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.3763, track.frame_0_loss_bbox_3: 0.9028, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.3707, track.frame_0_loss_bbox_4: 0.8952, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.3791, track.frame_0_loss_bbox_5: 0.8992, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.4101, track.frame_1_loss_bbox_0: 0.9823, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.3789, track.frame_1_loss_bbox_1: 0.8991, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.3577, track.frame_1_loss_bbox_2: 0.8639, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.3361, track.frame_1_loss_bbox_3: 0.8549, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.3381, track.frame_1_loss_bbox_4: 0.8457, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.3399, track.frame_1_loss_bbox_5: 0.8415, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.3898, track.frame_2_loss_bbox_0: 0.9012, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.3694, track.frame_2_loss_bbox_1: 0.8232, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.3452, track.frame_2_loss_bbox_2: 0.7964, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.3314, track.frame_2_loss_bbox_3: 0.7919, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.3275, track.frame_2_loss_bbox_4: 0.7905, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.3333, track.frame_2_loss_bbox_5: 0.7878, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.3803, track.frame_3_loss_bbox_0: 0.8768, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.3632, track.frame_3_loss_bbox_1: 0.7948, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.3386, track.frame_3_loss_bbox_2: 0.7794, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.3244, track.frame_3_loss_bbox_3: 0.7746, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.3243, track.frame_3_loss_bbox_4: 0.7668, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.3263, track.frame_3_loss_bbox_5: 0.7675, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.3953, track.frame_4_loss_bbox_0: 0.8366, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.3662, track.frame_4_loss_bbox_1: 0.7551, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.3430, track.frame_4_loss_bbox_2: 0.7324, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.3219, track.frame_4_loss_bbox_3: 0.7291, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.3133, track.frame_4_loss_bbox_4: 0.7295, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.3188, track.frame_4_loss_bbox_5: 0.7249, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8576, map.loss_bbox: 1.6594, map.loss_iou: 1.9640, map.loss_mask_things: 1.7545, map.loss_mask_stuff: 0.0306, map.d0.loss_mask_things_f: 1.7939, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7740, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7564, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7739, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0301, map.d0.loss_cls_stuff_f: 0.0000, map.d1.loss_mask_stuff_f: 0.0307, map.d1.loss_cls_stuff_f: 0.0000, map.d2.loss_mask_stuff_f: 0.0272, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0277, map.d3.loss_cls_stuff_f: 0.0001, map.d4.loss_mask_stuff_f: 0.0279, map.d4.loss_cls_stuff_f: 0.0000, map.d5.loss_mask_stuff_f: 0.0283, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 0.7574, map.d0.loss_bbox: 1.6927, map.d0.loss_iou: 1.9748, map.d1.loss_cls: 0.7579, map.d1.loss_bbox: 1.6826, map.d1.loss_iou: 1.9603, map.d2.loss_cls: 0.7989, map.d2.loss_bbox: 1.6752, map.d2.loss_iou: 1.9522, map.d3.loss_cls: 0.8271, map.d3.loss_bbox: 1.6637, map.d3.loss_iou: 1.9563, map.d4.loss_cls: 0.8444, map.d4.loss_bbox: 1.6563, map.d4.loss_iou: 1.9600, loss: 71.5424, grad_norm: 143.0722
2025-05-20 10:02:28,369 - mmdet - INFO - Epoch [1][80/7033]	lr: 8.773e-05, eta: 6 days, 11:20:30, time: 11.364, data_time: 0.159, memory: 47463, track.frame_0_loss_cls_0: 0.4572, track.frame_0_loss_bbox_0: 1.0131, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.4236, track.frame_0_loss_bbox_1: 0.8876, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.3806, track.frame_0_loss_bbox_2: 0.8675, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.3574, track.frame_0_loss_bbox_3: 0.8620, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.3459, track.frame_0_loss_bbox_4: 0.8557, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.3499, track.frame_0_loss_bbox_5: 0.8494, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.4160, track.frame_1_loss_bbox_0: 0.9451, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.3822, track.frame_1_loss_bbox_1: 0.8521, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.3594, track.frame_1_loss_bbox_2: 0.8181, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.3433, track.frame_1_loss_bbox_3: 0.8070, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.3319, track.frame_1_loss_bbox_4: 0.8014, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.3321, track.frame_1_loss_bbox_5: 0.7971, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.4012, track.frame_2_loss_bbox_0: 0.9000, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.3700, track.frame_2_loss_bbox_1: 0.8057, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.3497, track.frame_2_loss_bbox_2: 0.7755, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.3224, track.frame_2_loss_bbox_3: 0.7706, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.3213, track.frame_2_loss_bbox_4: 0.7619, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.3248, track.frame_2_loss_bbox_5: 0.7591, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.3929, track.frame_3_loss_bbox_0: 0.8515, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.3590, track.frame_3_loss_bbox_1: 0.7621, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.3296, track.frame_3_loss_bbox_2: 0.7383, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.3170, track.frame_3_loss_bbox_3: 0.7170, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.3107, track.frame_3_loss_bbox_4: 0.7099, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.3160, track.frame_3_loss_bbox_5: 0.7043, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.3869, track.frame_4_loss_bbox_0: 0.8202, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.3400, track.frame_4_loss_bbox_1: 0.7322, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.3181, track.frame_4_loss_bbox_2: 0.6995, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.2990, track.frame_4_loss_bbox_3: 0.6959, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.2942, track.frame_4_loss_bbox_4: 0.6859, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.2932, track.frame_4_loss_bbox_5: 0.6851, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8667, map.loss_bbox: 1.6660, map.loss_iou: 1.9684, map.loss_mask_things: 1.7584, map.loss_mask_stuff: 0.0308, map.d0.loss_mask_things_f: 1.7908, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7689, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7546, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7684, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0316, map.d0.loss_cls_stuff_f: 0.0000, map.d1.loss_mask_stuff_f: 0.0312, map.d1.loss_cls_stuff_f: 0.0000, map.d2.loss_mask_stuff_f: 0.0297, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0297, map.d3.loss_cls_stuff_f: 0.0000, map.d4.loss_mask_stuff_f: 0.0301, map.d4.loss_cls_stuff_f: 0.0000, map.d5.loss_mask_stuff_f: 0.0302, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 0.7457, map.d0.loss_bbox: 1.7042, map.d0.loss_iou: 1.9821, map.d1.loss_cls: 0.7603, map.d1.loss_bbox: 1.7043, map.d1.loss_iou: 1.9656, map.d2.loss_cls: 0.8083, map.d2.loss_bbox: 1.6915, map.d2.loss_iou: 1.9634, map.d3.loss_cls: 0.8568, map.d3.loss_bbox: 1.6781, map.d3.loss_iou: 1.9618, map.d4.loss_cls: 0.8544, map.d4.loss_bbox: 1.6714, map.d4.loss_iou: 1.9667, loss: 70.3269, grad_norm: 156.3013
2025-05-20 10:04:40,017 - mmdet - INFO - Epoch [1][90/7033]	lr: 9.040e-05, eta: 6 days, 11:09:34, time: 13.166, data_time: 0.142, memory: 47463, track.frame_0_loss_cls_0: 0.4167, track.frame_0_loss_bbox_0: 0.8884, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.3909, track.frame_0_loss_bbox_1: 0.7796, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.3529, track.frame_0_loss_bbox_2: 0.7585, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.3255, track.frame_0_loss_bbox_3: 0.7564, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.3121, track.frame_0_loss_bbox_4: 0.7547, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.3129, track.frame_0_loss_bbox_5: 0.7527, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.3781, track.frame_1_loss_bbox_0: 0.8457, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.3590, track.frame_1_loss_bbox_1: 0.7726, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.3334, track.frame_1_loss_bbox_2: 0.7508, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.3167, track.frame_1_loss_bbox_3: 0.7481, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.3114, track.frame_1_loss_bbox_4: 0.7399, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.3141, track.frame_1_loss_bbox_5: 0.7379, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.3595, track.frame_2_loss_bbox_0: 0.8170, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.3454, track.frame_2_loss_bbox_1: 0.7325, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.3198, track.frame_2_loss_bbox_2: 0.7101, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.3059, track.frame_2_loss_bbox_3: 0.7057, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.2990, track.frame_2_loss_bbox_4: 0.7001, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.3007, track.frame_2_loss_bbox_5: 0.6922, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.3609, track.frame_3_loss_bbox_0: 0.8120, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.3303, track.frame_3_loss_bbox_1: 0.7351, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.3093, track.frame_3_loss_bbox_2: 0.7158, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.2937, track.frame_3_loss_bbox_3: 0.7088, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.2859, track.frame_3_loss_bbox_4: 0.7052, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.2916, track.frame_3_loss_bbox_5: 0.6990, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.3520, track.frame_4_loss_bbox_0: 0.7937, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.3277, track.frame_4_loss_bbox_1: 0.7172, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.3082, track.frame_4_loss_bbox_2: 0.6929, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.2918, track.frame_4_loss_bbox_3: 0.6917, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.2854, track.frame_4_loss_bbox_4: 0.6872, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.2880, track.frame_4_loss_bbox_5: 0.6861, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8595, map.loss_bbox: 1.6188, map.loss_iou: 1.8934, map.loss_mask_things: 1.7471, map.loss_mask_stuff: 0.0286, map.d0.loss_mask_things_f: 1.7771, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7610, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7494, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7553, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0282, map.d0.loss_cls_stuff_f: 0.0000, map.d1.loss_mask_stuff_f: 0.0285, map.d1.loss_cls_stuff_f: 0.0000, map.d2.loss_mask_stuff_f: 0.0266, map.d2.loss_cls_stuff_f: 0.0000, map.d3.loss_mask_stuff_f: 0.0271, map.d3.loss_cls_stuff_f: 0.0000, map.d4.loss_mask_stuff_f: 0.0276, map.d4.loss_cls_stuff_f: 0.0000, map.d5.loss_mask_stuff_f: 0.0280, map.d5.loss_cls_stuff_f: 0.0000, map.d0.loss_cls: 0.7506, map.d0.loss_bbox: 1.6557, map.d0.loss_iou: 1.9069, map.d1.loss_cls: 0.7492, map.d1.loss_bbox: 1.6547, map.d1.loss_iou: 1.9063, map.d2.loss_cls: 0.7918, map.d2.loss_bbox: 1.6471, map.d2.loss_iou: 1.8997, map.d3.loss_cls: 0.8357, map.d3.loss_bbox: 1.6324, map.d3.loss_iou: 1.9011, map.d4.loss_cls: 0.8560, map.d4.loss_bbox: 1.6262, map.d4.loss_iou: 1.8960, loss: 67.1321, grad_norm: 130.0580
2025-05-20 10:07:19,222 - mmdet - INFO - Epoch [1][100/7033]	lr: 9.307e-05, eta: 6 days, 14:13:34, time: 15.919, data_time: 0.133, memory: 47463, track.frame_0_loss_cls_0: 0.4360, track.frame_0_loss_bbox_0: 0.9985, track.frame_0_loss_past_trajs_0: 0.0000, track.frame_0_loss_cls_1: 0.4035, track.frame_0_loss_bbox_1: 0.8550, track.frame_0_loss_past_trajs_1: 0.0000, track.frame_0_loss_cls_2: 0.3572, track.frame_0_loss_bbox_2: 0.8175, track.frame_0_loss_past_trajs_2: 0.0000, track.frame_0_loss_cls_3: 0.3284, track.frame_0_loss_bbox_3: 0.8059, track.frame_0_loss_past_trajs_3: 0.0000, track.frame_0_loss_cls_4: 0.3122, track.frame_0_loss_bbox_4: 0.8033, track.frame_0_loss_past_trajs_4: 0.0000, track.frame_0_loss_cls_5: 0.3108, track.frame_0_loss_bbox_5: 0.8027, track.frame_0_loss_past_trajs_5: 0.0000, track.frame_1_loss_cls_0: 0.3886, track.frame_1_loss_bbox_0: 0.9624, track.frame_1_loss_past_trajs_0: 0.0000, track.frame_1_loss_cls_1: 0.3567, track.frame_1_loss_bbox_1: 0.8542, track.frame_1_loss_past_trajs_1: 0.0000, track.frame_1_loss_cls_2: 0.3324, track.frame_1_loss_bbox_2: 0.8174, track.frame_1_loss_past_trajs_2: 0.0000, track.frame_1_loss_cls_3: 0.3096, track.frame_1_loss_bbox_3: 0.8067, track.frame_1_loss_past_trajs_3: 0.0000, track.frame_1_loss_cls_4: 0.3035, track.frame_1_loss_bbox_4: 0.8015, track.frame_1_loss_past_trajs_4: 0.0000, track.frame_1_loss_cls_5: 0.3068, track.frame_1_loss_bbox_5: 0.7987, track.frame_1_loss_past_trajs_5: 0.0000, track.frame_2_loss_cls_0: 0.3666, track.frame_2_loss_bbox_0: 0.8972, track.frame_2_loss_past_trajs_0: 0.0000, track.frame_2_loss_cls_1: 0.3325, track.frame_2_loss_bbox_1: 0.7855, track.frame_2_loss_past_trajs_1: 0.0000, track.frame_2_loss_cls_2: 0.3027, track.frame_2_loss_bbox_2: 0.7446, track.frame_2_loss_past_trajs_2: 0.0000, track.frame_2_loss_cls_3: 0.2893, track.frame_2_loss_bbox_3: 0.7249, track.frame_2_loss_past_trajs_3: 0.0000, track.frame_2_loss_cls_4: 0.2824, track.frame_2_loss_bbox_4: 0.7210, track.frame_2_loss_past_trajs_4: 0.0000, track.frame_2_loss_cls_5: 0.2829, track.frame_2_loss_bbox_5: 0.7228, track.frame_2_loss_past_trajs_5: 0.0000, track.frame_3_loss_cls_0: 0.3675, track.frame_3_loss_bbox_0: 0.8775, track.frame_3_loss_past_trajs_0: 0.0000, track.frame_3_loss_cls_1: 0.3354, track.frame_3_loss_bbox_1: 0.7750, track.frame_3_loss_past_trajs_1: 0.0000, track.frame_3_loss_cls_2: 0.3082, track.frame_3_loss_bbox_2: 0.7558, track.frame_3_loss_past_trajs_2: 0.0000, track.frame_3_loss_cls_3: 0.2897, track.frame_3_loss_bbox_3: 0.7495, track.frame_3_loss_past_trajs_3: 0.0000, track.frame_3_loss_cls_4: 0.2848, track.frame_3_loss_bbox_4: 0.7358, track.frame_3_loss_past_trajs_4: 0.0000, track.frame_3_loss_cls_5: 0.2885, track.frame_3_loss_bbox_5: 0.7296, track.frame_3_loss_past_trajs_5: 0.0000, track.frame_4_loss_cls_0: 0.3713, track.frame_4_loss_bbox_0: 0.8392, track.frame_4_loss_past_trajs_0: 0.0000, track.frame_4_loss_cls_1: 0.3333, track.frame_4_loss_bbox_1: 0.7477, track.frame_4_loss_past_trajs_1: 0.0000, track.frame_4_loss_cls_2: 0.3015, track.frame_4_loss_bbox_2: 0.7240, track.frame_4_loss_past_trajs_2: 0.0000, track.frame_4_loss_cls_3: 0.2847, track.frame_4_loss_bbox_3: 0.7161, track.frame_4_loss_past_trajs_3: 0.0000, track.frame_4_loss_cls_4: 0.2783, track.frame_4_loss_bbox_4: 0.7130, track.frame_4_loss_past_trajs_4: 0.0000, track.frame_4_loss_cls_5: 0.2785, track.frame_4_loss_bbox_5: 0.7169, track.frame_4_loss_past_trajs_5: 0.0000, map.loss_cls: 0.8861, map.loss_bbox: 1.7854, map.loss_iou: 1.8660, map.loss_mask_things: 1.6987, map.loss_mask_stuff: 0.0387, map.d0.loss_mask_things_f: 1.7256, map.d0.loss_iou_f: 0.0000, map.d0.loss_bbox_f: 0.0000, map.d0.loss_cls_f: 0.0000, map.d1.loss_mask_things_f: 1.7098, map.d1.loss_iou_f: 0.0000, map.d1.loss_bbox_f: 0.0000, map.d1.loss_cls_f: 0.0000, map.d2.loss_mask_things_f: 1.7013, map.d2.loss_iou_f: 0.0000, map.d2.loss_bbox_f: 0.0000, map.d2.loss_cls_f: 0.0000, map.d3.loss_mask_things_f: 1.7150, map.d3.loss_iou_f: 0.0000, map.d3.loss_bbox_f: 0.0000, map.d3.loss_cls_f: 0.0000, map.d0.loss_mask_stuff_f: 0.0394, map.d0.loss_cls_stuff_f: 0.0000, map.d1.loss_mask_stuff_f: 0.0389, map.d1.loss_cls_stuff_f: 0.0000, map.d2.loss_mask_stuff_f: 0.0375, map.d2.loss_cls_stuff_f: 0.0001, map.d3.loss_mask_stuff_f: 0.0383, map.d3.loss_cls_stuff_f: 0.0000, map.d4.loss_mask_stuff_f: 0.0393, map.d4.loss_cls_stuff_f: 0.0000, map.d5.loss_mask_stuff_f: 0.0390, map.d5.loss_cls_stuff_f: 0.0001, map.d0.loss_cls: 0.7294, map.d0.loss_bbox: 1.8242, map.d0.loss_iou: 1.8881, map.d1.loss_cls: 0.7326, map.d1.loss_bbox: 1.8152, map.d1.loss_iou: 1.8821, map.d2.loss_cls: 0.7678, map.d2.loss_bbox: 1.8014, map.d2.loss_iou: 1.8780, map.d3.loss_cls: 0.8200, map.d3.loss_bbox: 1.7925, map.d3.loss_iou: 1.8704, map.d4.loss_cls: 0.8507, map.d4.loss_bbox: 1.7906, map.d4.loss_iou: 1.8669, loss: 69.1924, grad_norm: 230.3479
