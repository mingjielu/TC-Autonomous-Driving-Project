{"env_info": "sys.platform: linux\nPython: 3.9.19 | packaged by conda-forge | (main, Mar 20 2024, 12:50:21) [GCC 12.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5: AMD Radeon Graphics\nCUDA_HOME: /opt/rocm\nNVCC: Not Available\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.1+gitcfc225a\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.4\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2022.0-Product Build 20211112 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - HIP Runtime 6.2.41134\n  - MIOpen 3.2.0\n  - Magma 2.7.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/opt/cache/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=1 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=OFF, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=ON, \n\nTorchVision: 0.14.0a0+befa256\nOpenCV: 4.8.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 60241134\nMMDetection: 2.26.0\nMMSegmentation: 0.25.0\nMMDetection3D: 1.0.0rc4+\nspconv2.0: False", "config": "point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesE2EDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=True)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadMultiViewImageFromFilesInCeph',\n        to_float32=True,\n        file_client_args=dict(backend='disk'),\n        img_root='data/nuscenes/'),\n    dict(type='PhotoMetricDistortionMultiViewImage'),\n    dict(\n        type='LoadAnnotations3D_E2E',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=False,\n        with_future_anns=True,\n        with_ins_inds_3d=True,\n        ins_inds_add_1=True),\n    dict(\n        type='GenerateOccFlowLabels',\n        grid_conf=dict(\n            xbound=[-50.0, 50.0, 0.5],\n            ybound=[-50.0, 50.0, 0.5],\n            zbound=[-10.0, 10.0, 20.0]),\n        ignore_index=255,\n        only_vehicle=True,\n        filter_invisible=False),\n    dict(\n        type='ObjectRangeFilterTrack',\n        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),\n    dict(\n        type='ObjectNameFilterTrack',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='CustomCollect3D',\n        keys=[\n            'gt_bboxes_3d', 'gt_labels_3d', 'gt_inds', 'img', 'timestamp',\n            'l2g_r_mat', 'l2g_t', 'gt_fut_traj', 'gt_fut_traj_mask',\n            'gt_past_traj', 'gt_past_traj_mask', 'gt_sdc_bbox', 'gt_sdc_label',\n            'gt_sdc_fut_traj', 'gt_sdc_fut_traj_mask', 'gt_lane_labels',\n            'gt_lane_bboxes', 'gt_lane_masks', 'gt_segmentation',\n            'gt_instance', 'gt_centerness', 'gt_offset', 'gt_flow',\n            'gt_backward_flow', 'gt_occ_has_invalid_frame',\n            'gt_occ_img_is_valid', 'gt_future_boxes', 'gt_future_labels',\n            'sdc_planning', 'sdc_planning_mask', 'command'\n        ])\n]\ntest_pipeline = [\n    dict(\n        type='LoadMultiViewImageFromFilesInCeph',\n        to_float32=True,\n        file_client_args=dict(backend='disk'),\n        img_root='data/nuscenes/'),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='LoadAnnotations3D_E2E',\n        with_bbox_3d=False,\n        with_label_3d=False,\n        with_attr_label=False,\n        with_future_anns=True,\n        with_ins_inds_3d=False,\n        ins_inds_add_1=True),\n    dict(\n        type='GenerateOccFlowLabels',\n        grid_conf=dict(\n            xbound=[-50.0, 50.0, 0.5],\n            ybound=[-50.0, 50.0, 0.5],\n            zbound=[-10.0, 10.0, 20.0]),\n        ignore_index=255,\n        only_vehicle=True,\n        filter_invisible=False),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1600, 900),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='CustomCollect3D',\n                keys=[\n                    'img', 'timestamp', 'l2g_r_mat', 'l2g_t', 'gt_lane_labels',\n                    'gt_lane_bboxes', 'gt_lane_masks', 'gt_segmentation',\n                    'gt_instance', 'gt_centerness', 'gt_offset', 'gt_flow',\n                    'gt_backward_flow', 'gt_occ_has_invalid_frame',\n                    'gt_occ_img_is_valid', 'sdc_planning', 'sdc_planning_mask',\n                    'command'\n                ])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=8,\n    train=dict(\n        type='NuScenesE2EDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/infos/nuscenes_infos_temporal_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadMultiViewImageFromFilesInCeph',\n                to_float32=True,\n                file_client_args=dict(backend='disk'),\n                img_root='data/nuscenes/'),\n            dict(type='PhotoMetricDistortionMultiViewImage'),\n            dict(\n                type='LoadAnnotations3D_E2E',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=False,\n                with_future_anns=True,\n                with_ins_inds_3d=True,\n                ins_inds_add_1=True),\n            dict(\n                type='GenerateOccFlowLabels',\n                grid_conf=dict(\n                    xbound=[-50.0, 50.0, 0.5],\n                    ybound=[-50.0, 50.0, 0.5],\n                    zbound=[-10.0, 10.0, 20.0]),\n                ignore_index=255,\n                only_vehicle=True,\n                filter_invisible=False),\n            dict(\n                type='ObjectRangeFilterTrack',\n                point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),\n            dict(\n                type='ObjectNameFilterTrack',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='CustomCollect3D',\n                keys=[\n                    'gt_bboxes_3d', 'gt_labels_3d', 'gt_inds', 'img',\n                    'timestamp', 'l2g_r_mat', 'l2g_t', 'gt_fut_traj',\n                    'gt_fut_traj_mask', 'gt_past_traj', 'gt_past_traj_mask',\n                    'gt_sdc_bbox', 'gt_sdc_label', 'gt_sdc_fut_traj',\n                    'gt_sdc_fut_traj_mask', 'gt_lane_labels', 'gt_lane_bboxes',\n                    'gt_lane_masks', 'gt_segmentation', 'gt_instance',\n                    'gt_centerness', 'gt_offset', 'gt_flow',\n                    'gt_backward_flow', 'gt_occ_has_invalid_frame',\n                    'gt_occ_img_is_valid', 'gt_future_boxes',\n                    'gt_future_labels', 'sdc_planning', 'sdc_planning_mask',\n                    'command'\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        file_client_args=dict(backend='disk'),\n        use_valid_flag=True,\n        patch_size=[102.4, 102.4],\n        canvas_size=(200, 200),\n        bev_size=(200, 200),\n        queue_length=5,\n        predict_steps=12,\n        past_steps=4,\n        fut_steps=4,\n        use_nonlinear_optimizer=True,\n        occ_receptive_field=3,\n        occ_n_future=6,\n        occ_filter_invalid_sample=False),\n    val=dict(\n        type='NuScenesE2EDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/infos/nuscenes_infos_temporal_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadMultiViewImageFromFilesInCeph',\n                to_float32=True,\n                file_client_args=dict(backend='disk'),\n                img_root='data/nuscenes/'),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='LoadAnnotations3D_E2E',\n                with_bbox_3d=False,\n                with_label_3d=False,\n                with_attr_label=False,\n                with_future_anns=True,\n                with_ins_inds_3d=False,\n                ins_inds_add_1=True),\n            dict(\n                type='GenerateOccFlowLabels',\n                grid_conf=dict(\n                    xbound=[-50.0, 50.0, 0.5],\n                    ybound=[-50.0, 50.0, 0.5],\n                    zbound=[-10.0, 10.0, 20.0]),\n                ignore_index=255,\n                only_vehicle=True,\n                filter_invisible=False),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1600, 900),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='CustomCollect3D',\n                        keys=[\n                            'img', 'timestamp', 'l2g_r_mat', 'l2g_t',\n                            'gt_lane_labels', 'gt_lane_bboxes',\n                            'gt_lane_masks', 'gt_segmentation', 'gt_instance',\n                            'gt_centerness', 'gt_offset', 'gt_flow',\n                            'gt_backward_flow', 'gt_occ_has_invalid_frame',\n                            'gt_occ_img_is_valid', 'sdc_planning',\n                            'sdc_planning_mask', 'command'\n                        ])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        file_client_args=dict(backend='disk'),\n        patch_size=[102.4, 102.4],\n        canvas_size=(200, 200),\n        bev_size=(200, 200),\n        predict_steps=12,\n        past_steps=4,\n        fut_steps=4,\n        use_nonlinear_optimizer=True,\n        samples_per_gpu=1,\n        eval_mod=['det', 'track', 'map'],\n        occ_receptive_field=3,\n        occ_n_future=6,\n        occ_filter_invalid_sample=False),\n    test=dict(\n        type='NuScenesE2EDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/infos/nuscenes_infos_temporal_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadMultiViewImageFromFilesInCeph',\n                to_float32=True,\n                file_client_args=dict(backend='disk'),\n                img_root='data/nuscenes/'),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='LoadAnnotations3D_E2E',\n                with_bbox_3d=False,\n                with_label_3d=False,\n                with_attr_label=False,\n                with_future_anns=True,\n                with_ins_inds_3d=False,\n                ins_inds_add_1=True),\n            dict(\n                type='GenerateOccFlowLabels',\n                grid_conf=dict(\n                    xbound=[-50.0, 50.0, 0.5],\n                    ybound=[-50.0, 50.0, 0.5],\n                    zbound=[-10.0, 10.0, 20.0]),\n                ignore_index=255,\n                only_vehicle=True,\n                filter_invisible=False),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1600, 900),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='CustomCollect3D',\n                        keys=[\n                            'img', 'timestamp', 'l2g_r_mat', 'l2g_t',\n                            'gt_lane_labels', 'gt_lane_bboxes',\n                            'gt_lane_masks', 'gt_segmentation', 'gt_instance',\n                            'gt_centerness', 'gt_offset', 'gt_flow',\n                            'gt_backward_flow', 'gt_occ_has_invalid_frame',\n                            'gt_occ_img_is_valid', 'sdc_planning',\n                            'sdc_planning_mask', 'command'\n                        ])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        file_client_args=dict(backend='disk'),\n        patch_size=[102.4, 102.4],\n        canvas_size=(200, 200),\n        bev_size=(200, 200),\n        predict_steps=12,\n        past_steps=4,\n        fut_steps=4,\n        occ_n_future=6,\n        use_nonlinear_optimizer=True,\n        eval_mod=['det', 'map', 'track']),\n    shuffler_sampler=dict(type='DistributedGroupSampler'),\n    nonshuffler_sampler=dict(type='DistributedSampler'))\nevaluation = dict(\n    interval=6,\n    pipeline=[\n        dict(\n            type='LoadMultiViewImageFromFilesInCeph',\n            to_float32=True,\n            file_client_args=dict(backend='disk'),\n            img_root='data/nuscenes/'),\n        dict(\n            type='NormalizeMultiviewImage',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='PadMultiViewImage', size_divisor=32),\n        dict(\n            type='LoadAnnotations3D_E2E',\n            with_bbox_3d=False,\n            with_label_3d=False,\n            with_attr_label=False,\n            with_future_anns=True,\n            with_ins_inds_3d=False,\n            ins_inds_add_1=True),\n        dict(\n            type='GenerateOccFlowLabels',\n            grid_conf=dict(\n                xbound=[-50.0, 50.0, 0.5],\n                ybound=[-50.0, 50.0, 0.5],\n                zbound=[-10.0, 10.0, 20.0]),\n            ignore_index=255,\n            only_vehicle=True,\n            filter_invisible=False),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1600, 900),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='CustomCollect3D',\n                    keys=[\n                        'img', 'timestamp', 'l2g_r_mat', 'l2g_t',\n                        'gt_lane_labels', 'gt_lane_bboxes', 'gt_lane_masks',\n                        'gt_segmentation', 'gt_instance', 'gt_centerness',\n                        'gt_offset', 'gt_flow', 'gt_backward_flow',\n                        'gt_occ_has_invalid_frame', 'gt_occ_img_is_valid',\n                        'sdc_planning', 'sdc_planning_mask', 'command'\n                    ])\n            ])\n    ],\n    planning_evaluation_strategy='uniad')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=10,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './projects/work_dirs/stage1_track_map/base_track_map/'\nload_from = 'ckpts/bevformer_r101_dcn_24ep.pth'\nresume_from = None\nworkflow = [('train', 1)]\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\nvoxel_size = [0.2, 0.2, 8]\npatch_size = [102.4, 102.4]\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n_dim_ = 256\n_pos_dim_ = 128\n_ffn_dim_ = 512\n_num_levels_ = 4\nbev_h_ = 200\nbev_w_ = 200\n_feed_dim_ = 512\n_dim_half_ = 128\ncanvas_size = (200, 200)\nqueue_length = 5\npredict_steps = 12\npredict_modes = 6\nfut_steps = 4\npast_steps = 4\nuse_nonlinear_optimizer = True\nocc_n_future = 4\nocc_n_future_plan = 6\nocc_n_future_max = 6\nplanning_steps = 6\nuse_col_optim = True\nplanning_evaluation_strategy = 'uniad'\noccflow_grid_conf = dict(\n    xbound=[-50.0, 50.0, 0.5],\n    ybound=[-50.0, 50.0, 0.5],\n    zbound=[-10.0, 10.0, 20.0])\ntrain_gt_iou_threshold = 0.3\nmodel = dict(\n    type='UniAD',\n    gt_iou_threshold=0.3,\n    queue_length=5,\n    use_grid_mask=True,\n    video_test_mode=True,\n    num_query=900,\n    num_classes=10,\n    pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n    img_backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=4,\n        norm_cfg=dict(type='BN2d', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),\n        stage_with_dcn=(False, False, True, True)),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[512, 1024, 2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_output',\n        num_outs=4,\n        relu_before_extra_convs=True),\n    freeze_img_backbone=True,\n    freeze_img_neck=False,\n    freeze_bn=False,\n    score_thresh=0.4,\n    filter_score_thresh=0.35,\n    qim_args=dict(\n        qim_type='QIMBase',\n        merger_dropout=0,\n        update_query_pos=True,\n        fp_ratio=0.3,\n        random_drop=0.1),\n    mem_args=dict(\n        memory_bank_type='MemoryBank',\n        memory_bank_score_thresh=0.0,\n        memory_bank_len=4),\n    loss_cfg=dict(\n        type='ClipMatcher',\n        num_classes=10,\n        weight_dict=None,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        assigner=dict(\n            type='HungarianAssigner3DTrack',\n            cls_cost=dict(type='FocalLossCost', weight=2.0),\n            reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_past_traj_weight=0.0),\n    pts_bbox_head=dict(\n        type='BEVFormerTrackHead',\n        bev_h=200,\n        bev_w=200,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        past_steps=4,\n        fut_steps=4,\n        transformer=dict(\n            type='PerceptionTransformer',\n            rotate_prev_bev=True,\n            use_shift=True,\n            use_can_bus=True,\n            embed_dims=256,\n            encoder=dict(\n                type='BEVFormerEncoder',\n                num_layers=6,\n                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n                num_points_in_pillar=4,\n                return_intermediate=False,\n                transformerlayers=dict(\n                    type='BEVFormerLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='TemporalSelfAttention',\n                            embed_dims=256,\n                            num_levels=1),\n                        dict(\n                            type='SpatialCrossAttention',\n                            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n                            deformable_attention=dict(\n                                type='MSDeformableAttention3D',\n                                embed_dims=256,\n                                num_points=8,\n                                num_levels=4),\n                            embed_dims=256)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm'))),\n            decoder=dict(\n                type='DetectionTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='CustomMSDeformableAttention',\n                            embed_dims=256,\n                            num_levels=1)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        bbox_coder=dict(\n            type='NMSFreeCoder',\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n            max_num=300,\n            voxel_size=[0.2, 0.2, 8],\n            num_classes=10),\n        positional_encoding=dict(\n            type='LearnedPositionalEncoding',\n            num_feats=128,\n            row_num_embed=200,\n            col_num_embed=200),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0.0)),\n    seg_head=dict(\n        type='PansegformerHead',\n        bev_h=200,\n        bev_w=200,\n        canvas_size=(200, 200),\n        pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n        num_query=300,\n        num_classes=4,\n        num_things_classes=3,\n        num_stuff_classes=1,\n        in_channels=2048,\n        sync_cls_avg_factor=True,\n        as_two_stage=False,\n        with_box_refine=True,\n        transformer=dict(\n            type='SegDeformableTransformer',\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=256,\n                        num_levels=4),\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),\n            decoder=dict(\n                type='DeformableDetrTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='MultiScaleDeformableAttention',\n                            embed_dims=256,\n                            num_levels=4)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=5.0),\n        loss_iou=dict(type='GIoULoss', loss_weight=2.0),\n        loss_mask=dict(type='DiceLoss', loss_weight=2.0),\n        thing_transformer_head=dict(\n            type='SegMaskHead', d_model=256, nhead=8, num_decoder_layers=4),\n        stuff_transformer_head=dict(\n            type='SegMaskHead',\n            d_model=256,\n            nhead=8,\n            num_decoder_layers=6,\n            self_attn=True),\n        train_cfg=dict(\n            assigner=dict(\n                type='HungarianAssigner',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(\n                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),\n                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0)),\n            assigner_with_mask=dict(\n                type='HungarianAssigner_multi_info',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(\n                    type='BBoxL1Cost', weight=5.0, box_format='xywh'),\n                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0),\n                mask_cost=dict(type='DiceCost', weight=2.0)),\n            sampler=dict(type='PseudoSampler'),\n            sampler_with_mask=dict(type='PseudoSampler_segformer'))),\n    train_cfg=dict(\n        pts=dict(\n            grid_size=[512, 512, 1],\n            voxel_size=[0.2, 0.2, 8],\n            point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n            out_size_factor=4,\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0.0),\n                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]))))\ninfo_root = 'data/infos/'\nann_file_train = 'data/infos/nuscenes_infos_temporal_train.pkl'\nann_file_val = 'data/infos/nuscenes_infos_temporal_val.pkl'\nann_file_test = 'data/infos/nuscenes_infos_temporal_val.pkl'\noptimizer = dict(\n    type='AdamW',\n    lr=0.0002,\n    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    min_lr_ratio=0.001)\ntotal_epochs = 6\nrunner = dict(type='EpochBasedRunner', max_epochs=6)\nfind_unused_parameters = True\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "base_track_map.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 7e-05, "memory": 49162, "data_time": 1.44028, "track.frame_0_loss_cls_0": 1.38883, "track.frame_0_loss_bbox_0": 1.89261, "track.frame_0_loss_past_trajs_0": 0.0, "track.frame_0_loss_cls_1": 1.21696, "track.frame_0_loss_bbox_1": 1.8503, "track.frame_0_loss_past_trajs_1": 0.0, "track.frame_0_loss_cls_2": 1.19812, "track.frame_0_loss_bbox_2": 1.79455, "track.frame_0_loss_past_trajs_2": 0.0, "track.frame_0_loss_cls_3": 1.15158, "track.frame_0_loss_bbox_3": 1.79842, "track.frame_0_loss_past_trajs_3": 0.0, "track.frame_0_loss_cls_4": 1.19024, "track.frame_0_loss_bbox_4": 1.79071, "track.frame_0_loss_past_trajs_4": 0.0, "track.frame_0_loss_cls_5": 1.17889, "track.frame_0_loss_bbox_5": 1.78695, "track.frame_0_loss_past_trajs_5": 0.0, "track.frame_1_loss_cls_0": 1.54261, "track.frame_1_loss_bbox_0": 1.90874, "track.frame_1_loss_past_trajs_0": 0.0, "track.frame_1_loss_cls_1": 1.40971, "track.frame_1_loss_bbox_1": 1.76547, "track.frame_1_loss_past_trajs_1": 0.0, "track.frame_1_loss_cls_2": 1.38877, "track.frame_1_loss_bbox_2": 1.69475, "track.frame_1_loss_past_trajs_2": 0.0, "track.frame_1_loss_cls_3": 1.33896, "track.frame_1_loss_bbox_3": 1.72215, "track.frame_1_loss_past_trajs_3": 0.0, "track.frame_1_loss_cls_4": 1.35044, "track.frame_1_loss_bbox_4": 1.71462, "track.frame_1_loss_past_trajs_4": 0.0, "track.frame_1_loss_cls_5": 1.31953, "track.frame_1_loss_bbox_5": 1.71039, "track.frame_1_loss_past_trajs_5": 0.0, "track.frame_2_loss_cls_0": 1.78568, "track.frame_2_loss_bbox_0": 1.73276, "track.frame_2_loss_past_trajs_0": 0.0, "track.frame_2_loss_cls_1": 1.49141, "track.frame_2_loss_bbox_1": 1.71388, "track.frame_2_loss_past_trajs_1": 0.0, "track.frame_2_loss_cls_2": 1.42288, "track.frame_2_loss_bbox_2": 1.69493, "track.frame_2_loss_past_trajs_2": 0.0, "track.frame_2_loss_cls_3": 1.37357, "track.frame_2_loss_bbox_3": 1.67573, "track.frame_2_loss_past_trajs_3": 0.0, "track.frame_2_loss_cls_4": 1.37154, "track.frame_2_loss_bbox_4": 1.66318, "track.frame_2_loss_past_trajs_4": 0.0, "track.frame_2_loss_cls_5": 1.36987, "track.frame_2_loss_bbox_5": 1.64138, "track.frame_2_loss_past_trajs_5": 0.0, "track.frame_3_loss_cls_0": 1.807, "track.frame_3_loss_bbox_0": 1.77328, "track.frame_3_loss_past_trajs_0": 0.0, "track.frame_3_loss_cls_1": 1.54744, "track.frame_3_loss_bbox_1": 1.65045, "track.frame_3_loss_past_trajs_1": 0.0, "track.frame_3_loss_cls_2": 1.56174, "track.frame_3_loss_bbox_2": 1.62945, "track.frame_3_loss_past_trajs_2": 0.0, "track.frame_3_loss_cls_3": 1.48966, "track.frame_3_loss_bbox_3": 1.62042, "track.frame_3_loss_past_trajs_3": 0.0, "track.frame_3_loss_cls_4": 1.52238, "track.frame_3_loss_bbox_4": 1.58511, "track.frame_3_loss_past_trajs_4": 0.0, "track.frame_3_loss_cls_5": 1.50349, "track.frame_3_loss_bbox_5": 1.57724, "track.frame_3_loss_past_trajs_5": 0.0, "track.frame_4_loss_cls_0": 1.79467, "track.frame_4_loss_bbox_0": 1.85722, "track.frame_4_loss_past_trajs_0": 0.0, "track.frame_4_loss_cls_1": 1.62961, "track.frame_4_loss_bbox_1": 1.76022, "track.frame_4_loss_past_trajs_1": 0.0, "track.frame_4_loss_cls_2": 1.69788, "track.frame_4_loss_bbox_2": 1.67334, "track.frame_4_loss_past_trajs_2": 0.0, "track.frame_4_loss_cls_3": 1.64762, "track.frame_4_loss_bbox_3": 1.65507, "track.frame_4_loss_past_trajs_3": 0.0, "track.frame_4_loss_cls_4": 1.69548, "track.frame_4_loss_bbox_4": 1.68594, "track.frame_4_loss_past_trajs_4": 0.0, "track.frame_4_loss_cls_5": 1.69648, "track.frame_4_loss_bbox_5": 1.66255, "track.frame_4_loss_past_trajs_5": 0.0, "map.loss_cls": 1.22693, "map.loss_bbox": 1.89075, "map.loss_iou": 2.22439, "map.loss_mask_things": 1.79704, "map.loss_mask_stuff": 0.07459, "map.d0.loss_mask_things_f": 1.81623, "map.d0.loss_iou_f": 0.0, "map.d0.loss_bbox_f": 0.0, "map.d0.loss_cls_f": 0.0, "map.d1.loss_mask_things_f": 1.8146, "map.d1.loss_iou_f": 0.0, "map.d1.loss_bbox_f": 0.0, "map.d1.loss_cls_f": 0.0, "map.d2.loss_mask_things_f": 1.80101, "map.d2.loss_iou_f": 0.0, "map.d2.loss_bbox_f": 0.0, "map.d2.loss_cls_f": 0.0, "map.d3.loss_mask_things_f": 1.80319, "map.d3.loss_iou_f": 0.0, "map.d3.loss_bbox_f": 0.0, "map.d3.loss_cls_f": 0.0, "map.d0.loss_mask_stuff_f": 0.06754, "map.d0.loss_cls_stuff_f": 0.11449, "map.d1.loss_mask_stuff_f": 0.10267, "map.d1.loss_cls_stuff_f": 0.10904, "map.d2.loss_mask_stuff_f": 0.06538, "map.d2.loss_cls_stuff_f": 0.10368, "map.d3.loss_mask_stuff_f": 0.07093, "map.d3.loss_cls_stuff_f": 0.08853, "map.d4.loss_mask_stuff_f": 0.07028, "map.d4.loss_cls_stuff_f": 0.10538, "map.d5.loss_mask_stuff_f": 0.07495, "map.d5.loss_cls_stuff_f": 0.12369, "map.d0.loss_cls": 1.73691, "map.d0.loss_bbox": 1.91867, "map.d0.loss_iou": 2.25326, "map.d1.loss_cls": 1.55494, "map.d1.loss_bbox": 1.91872, "map.d1.loss_iou": 2.24835, "map.d2.loss_cls": 1.26942, "map.d2.loss_bbox": 1.91153, "map.d2.loss_iou": 2.24194, "map.d3.loss_cls": 1.22238, "map.d3.loss_bbox": 1.90661, "map.d3.loss_iou": 2.23003, "map.d4.loss_cls": 1.27253, "map.d4.loss_bbox": 1.89885, "map.d4.loss_iou": 2.23024, "loss": 139.12456, "grad_norm": 1808.10969, "time": 18.30854}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 7e-05, "memory": 49229, "data_time": 0.10719, "track.frame_0_loss_cls_0": 0.76895, "track.frame_0_loss_bbox_0": 1.90443, "track.frame_0_loss_past_trajs_0": 0.0, "track.frame_0_loss_cls_1": 0.77797, "track.frame_0_loss_bbox_1": 1.84055, "track.frame_0_loss_past_trajs_1": 0.0, "track.frame_0_loss_cls_2": 0.71074, "track.frame_0_loss_bbox_2": 1.79935, "track.frame_0_loss_past_trajs_2": 0.0, "track.frame_0_loss_cls_3": 0.70189, "track.frame_0_loss_bbox_3": 1.77558, "track.frame_0_loss_past_trajs_3": 0.0, "track.frame_0_loss_cls_4": 0.69616, "track.frame_0_loss_bbox_4": 1.76167, "track.frame_0_loss_past_trajs_4": 0.0, "track.frame_0_loss_cls_5": 0.70319, "track.frame_0_loss_bbox_5": 1.76386, "track.frame_0_loss_past_trajs_5": 0.0, "track.frame_1_loss_cls_0": 0.86562, "track.frame_1_loss_bbox_0": 2.03097, "track.frame_1_loss_past_trajs_0": 0.0, "track.frame_1_loss_cls_1": 0.80754, "track.frame_1_loss_bbox_1": 1.9664, "track.frame_1_loss_past_trajs_1": 0.0, "track.frame_1_loss_cls_2": 0.78113, "track.frame_1_loss_bbox_2": 1.91564, "track.frame_1_loss_past_trajs_2": 0.0, "track.frame_1_loss_cls_3": 0.74182, "track.frame_1_loss_bbox_3": 1.95051, "track.frame_1_loss_past_trajs_3": 0.0, "track.frame_1_loss_cls_4": 0.77788, "track.frame_1_loss_bbox_4": 1.90506, "track.frame_1_loss_past_trajs_4": 0.0, "track.frame_1_loss_cls_5": 0.78747, "track.frame_1_loss_bbox_5": 1.90085, "track.frame_1_loss_past_trajs_5": 0.0, "track.frame_2_loss_cls_0": 0.84312, "track.frame_2_loss_bbox_0": 1.92107, "track.frame_2_loss_past_trajs_0": 0.0, "track.frame_2_loss_cls_1": 0.76138, "track.frame_2_loss_bbox_1": 1.84192, "track.frame_2_loss_past_trajs_1": 0.0, "track.frame_2_loss_cls_2": 0.74218, "track.frame_2_loss_bbox_2": 1.8041, "track.frame_2_loss_past_trajs_2": 0.0, "track.frame_2_loss_cls_3": 0.73019, "track.frame_2_loss_bbox_3": 1.77461, "track.frame_2_loss_past_trajs_3": 0.0, "track.frame_2_loss_cls_4": 0.73132, "track.frame_2_loss_bbox_4": 1.75676, "track.frame_2_loss_past_trajs_4": 0.0, "track.frame_2_loss_cls_5": 0.73493, "track.frame_2_loss_bbox_5": 1.76033, "track.frame_2_loss_past_trajs_5": 0.0, "track.frame_3_loss_cls_0": 0.83742, "track.frame_3_loss_bbox_0": 1.81053, "track.frame_3_loss_past_trajs_0": 0.0, "track.frame_3_loss_cls_1": 0.75957, "track.frame_3_loss_bbox_1": 1.73011, "track.frame_3_loss_past_trajs_1": 0.0, "track.frame_3_loss_cls_2": 0.73528, "track.frame_3_loss_bbox_2": 1.69818, "track.frame_3_loss_past_trajs_2": 0.0, "track.frame_3_loss_cls_3": 0.73214, "track.frame_3_loss_bbox_3": 1.6799, "track.frame_3_loss_past_trajs_3": 0.0, "track.frame_3_loss_cls_4": 0.73239, "track.frame_3_loss_bbox_4": 1.67806, "track.frame_3_loss_past_trajs_4": 0.0, "track.frame_3_loss_cls_5": 0.73518, "track.frame_3_loss_bbox_5": 1.67864, "track.frame_3_loss_past_trajs_5": 0.0, "track.frame_4_loss_cls_0": 0.75172, "track.frame_4_loss_bbox_0": 1.77262, "track.frame_4_loss_past_trajs_0": 0.0, "track.frame_4_loss_cls_1": 0.68386, "track.frame_4_loss_bbox_1": 1.69904, "track.frame_4_loss_past_trajs_1": 0.0, "track.frame_4_loss_cls_2": 0.63783, "track.frame_4_loss_bbox_2": 1.67648, "track.frame_4_loss_past_trajs_2": 0.0, "track.frame_4_loss_cls_3": 0.62391, "track.frame_4_loss_bbox_3": 1.66905, "track.frame_4_loss_past_trajs_3": 0.0, "track.frame_4_loss_cls_4": 0.64396, "track.frame_4_loss_bbox_4": 1.65646, "track.frame_4_loss_past_trajs_4": 0.0, "track.frame_4_loss_cls_5": 0.66381, "track.frame_4_loss_bbox_5": 1.65037, "track.frame_4_loss_past_trajs_5": 0.0, "map.loss_cls": 0.93239, "map.loss_bbox": 1.97594, "map.loss_iou": 2.03887, "map.loss_mask_things": 1.68764, "map.loss_mask_stuff": 0.09595, "map.d0.loss_mask_things_f": 1.73134, "map.d0.loss_iou_f": 0.0, "map.d0.loss_bbox_f": 0.0, "map.d0.loss_cls_f": 0.0, "map.d1.loss_mask_things_f": 1.70729, "map.d1.loss_iou_f": 0.0, "map.d1.loss_bbox_f": 0.0, "map.d1.loss_cls_f": 0.0, "map.d2.loss_mask_things_f": 1.69533, "map.d2.loss_iou_f": 0.0, "map.d2.loss_bbox_f": 0.0, "map.d2.loss_cls_f": 0.0, "map.d3.loss_mask_things_f": 1.69366, "map.d3.loss_iou_f": 0.0, "map.d3.loss_bbox_f": 0.0, "map.d3.loss_cls_f": 0.0, "map.d0.loss_mask_stuff_f": 0.09394, "map.d0.loss_cls_stuff_f": 0.00431, "map.d1.loss_mask_stuff_f": 0.10362, "map.d1.loss_cls_stuff_f": 0.00224, "map.d2.loss_mask_stuff_f": 0.08796, "map.d2.loss_cls_stuff_f": 0.00161, "map.d3.loss_mask_stuff_f": 0.09996, "map.d3.loss_cls_stuff_f": 0.00093, "map.d4.loss_mask_stuff_f": 0.09664, "map.d4.loss_cls_stuff_f": 0.00125, "map.d5.loss_mask_stuff_f": 0.10444, "map.d5.loss_cls_stuff_f": 0.00149, "map.d0.loss_cls": 1.40128, "map.d0.loss_bbox": 2.03954, "map.d0.loss_iou": 2.07435, "map.d1.loss_cls": 1.09283, "map.d1.loss_bbox": 2.02922, "map.d1.loss_iou": 2.06717, "map.d2.loss_cls": 0.99334, "map.d2.loss_bbox": 2.00256, "map.d2.loss_iou": 2.05849, "map.d3.loss_cls": 1.04574, "map.d3.loss_bbox": 1.98698, "map.d3.loss_iou": 2.04971, "map.d4.loss_cls": 0.92489, "map.d4.loss_bbox": 1.98041, "map.d4.loss_iou": 2.04574, "loss": 115.92267, "grad_norm": 395.64731, "time": 16.73314}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 7e-05, "memory": 49261, "data_time": 0.12938, "track.frame_0_loss_cls_0": 0.60184, "track.frame_0_loss_bbox_0": 1.43617, "track.frame_0_loss_past_trajs_0": 0.0, "track.frame_0_loss_cls_1": 0.6074, "track.frame_0_loss_bbox_1": 1.27377, "track.frame_0_loss_past_trajs_1": 0.0, "track.frame_0_loss_cls_2": 0.60517, "track.frame_0_loss_bbox_2": 1.2407, "track.frame_0_loss_past_trajs_2": 0.0, "track.frame_0_loss_cls_3": 0.59876, "track.frame_0_loss_bbox_3": 1.22745, "track.frame_0_loss_past_trajs_3": 0.0, "track.frame_0_loss_cls_4": 0.60477, "track.frame_0_loss_bbox_4": 1.20373, "track.frame_0_loss_past_trajs_4": 0.0, "track.frame_0_loss_cls_5": 0.6072, "track.frame_0_loss_bbox_5": 1.18599, "track.frame_0_loss_past_trajs_5": 0.0, "track.frame_1_loss_cls_0": 0.60953, "track.frame_1_loss_bbox_0": 1.48278, "track.frame_1_loss_past_trajs_0": 0.0, "track.frame_1_loss_cls_1": 0.57334, "track.frame_1_loss_bbox_1": 1.35497, "track.frame_1_loss_past_trajs_1": 0.0, "track.frame_1_loss_cls_2": 0.57745, "track.frame_1_loss_bbox_2": 1.29291, "track.frame_1_loss_past_trajs_2": 0.0, "track.frame_1_loss_cls_3": 0.56429, "track.frame_1_loss_bbox_3": 1.26595, "track.frame_1_loss_past_trajs_3": 0.0, "track.frame_1_loss_cls_4": 0.57091, "track.frame_1_loss_bbox_4": 1.23881, "track.frame_1_loss_past_trajs_4": 0.0, "track.frame_1_loss_cls_5": 0.57173, "track.frame_1_loss_bbox_5": 1.22716, "track.frame_1_loss_past_trajs_5": 0.0, "track.frame_2_loss_cls_0": 0.60163, "track.frame_2_loss_bbox_0": 1.51441, "track.frame_2_loss_past_trajs_0": 0.0, "track.frame_2_loss_cls_1": 0.59142, "track.frame_2_loss_bbox_1": 1.39387, "track.frame_2_loss_past_trajs_1": 0.0, "track.frame_2_loss_cls_2": 0.60067, "track.frame_2_loss_bbox_2": 1.32777, "track.frame_2_loss_past_trajs_2": 0.0, "track.frame_2_loss_cls_3": 0.59073, "track.frame_2_loss_bbox_3": 1.31203, "track.frame_2_loss_past_trajs_3": 0.0, "track.frame_2_loss_cls_4": 0.57546, "track.frame_2_loss_bbox_4": 1.28885, "track.frame_2_loss_past_trajs_4": 0.0, "track.frame_2_loss_cls_5": 0.56924, "track.frame_2_loss_bbox_5": 1.27871, "track.frame_2_loss_past_trajs_5": 0.0, "track.frame_3_loss_cls_0": 0.58768, "track.frame_3_loss_bbox_0": 1.49537, "track.frame_3_loss_past_trajs_0": 0.0, "track.frame_3_loss_cls_1": 0.57864, "track.frame_3_loss_bbox_1": 1.37754, "track.frame_3_loss_past_trajs_1": 0.0, "track.frame_3_loss_cls_2": 0.57897, "track.frame_3_loss_bbox_2": 1.33655, "track.frame_3_loss_past_trajs_2": 0.0, "track.frame_3_loss_cls_3": 0.56573, "track.frame_3_loss_bbox_3": 1.31056, "track.frame_3_loss_past_trajs_3": 0.0, "track.frame_3_loss_cls_4": 0.56336, "track.frame_3_loss_bbox_4": 1.30199, "track.frame_3_loss_past_trajs_4": 0.0, "track.frame_3_loss_cls_5": 0.5634, "track.frame_3_loss_bbox_5": 1.29677, "track.frame_3_loss_past_trajs_5": 0.0, "track.frame_4_loss_cls_0": 0.58658, "track.frame_4_loss_bbox_0": 1.59115, "track.frame_4_loss_past_trajs_0": 0.0, "track.frame_4_loss_cls_1": 0.5954, "track.frame_4_loss_bbox_1": 1.45517, "track.frame_4_loss_past_trajs_1": 0.0, "track.frame_4_loss_cls_2": 0.58935, "track.frame_4_loss_bbox_2": 1.39717, "track.frame_4_loss_past_trajs_2": 0.0, "track.frame_4_loss_cls_3": 0.5942, "track.frame_4_loss_bbox_3": 1.37549, "track.frame_4_loss_past_trajs_3": 0.0, "track.frame_4_loss_cls_4": 0.60721, "track.frame_4_loss_bbox_4": 1.35611, "track.frame_4_loss_past_trajs_4": 0.0, "track.frame_4_loss_cls_5": 0.6154, "track.frame_4_loss_bbox_5": 1.33402, "track.frame_4_loss_past_trajs_5": 0.0, "map.loss_cls": 0.94777, "map.loss_bbox": 1.96786, "map.loss_iou": 1.81163, "map.loss_mask_things": 1.71506, "map.loss_mask_stuff": 0.06427, "map.d0.loss_mask_things_f": 1.74612, "map.d0.loss_iou_f": 0.0, "map.d0.loss_bbox_f": 0.0, "map.d0.loss_cls_f": 0.0, "map.d1.loss_mask_things_f": 1.71579, "map.d1.loss_iou_f": 0.0, "map.d1.loss_bbox_f": 0.0, "map.d1.loss_cls_f": 0.0, "map.d2.loss_mask_things_f": 1.69591, "map.d2.loss_iou_f": 0.0, "map.d2.loss_bbox_f": 0.0, "map.d2.loss_cls_f": 0.0, "map.d3.loss_mask_things_f": 1.71014, "map.d3.loss_iou_f": 0.0, "map.d3.loss_bbox_f": 0.0, "map.d3.loss_cls_f": 0.0, "map.d0.loss_mask_stuff_f": 0.06395, "map.d0.loss_cls_stuff_f": 0.00023, "map.d1.loss_mask_stuff_f": 0.07336, "map.d1.loss_cls_stuff_f": 0.00025, "map.d2.loss_mask_stuff_f": 0.07021, "map.d2.loss_cls_stuff_f": 0.00019, "map.d3.loss_mask_stuff_f": 0.06546, "map.d3.loss_cls_stuff_f": 0.00022, "map.d4.loss_mask_stuff_f": 0.07188, "map.d4.loss_cls_stuff_f": 0.00023, "map.d5.loss_mask_stuff_f": 0.06788, "map.d5.loss_cls_stuff_f": 0.00029, "map.d0.loss_cls": 1.15517, "map.d0.loss_bbox": 2.033, "map.d0.loss_iou": 1.84781, "map.d1.loss_cls": 0.8933, "map.d1.loss_bbox": 2.00984, "map.d1.loss_iou": 1.83457, "map.d2.loss_cls": 0.88506, "map.d2.loss_bbox": 1.99192, "map.d2.loss_iou": 1.82078, "map.d3.loss_cls": 0.91631, "map.d3.loss_bbox": 1.98126, "map.d3.loss_iou": 1.81493, "map.d4.loss_cls": 0.95839, "map.d4.loss_bbox": 1.96869, "map.d4.loss_iou": 1.81158, "loss": 95.53265, "grad_norm": 262.11556, "time": 16.70147}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 8e-05, "memory": 49261, "data_time": 0.12434, "track.frame_0_loss_cls_0": 0.64171, "track.frame_0_loss_bbox_0": 1.78654, "track.frame_0_loss_past_trajs_0": 0.0, "track.frame_0_loss_cls_1": 0.6143, "track.frame_0_loss_bbox_1": 1.61671, "track.frame_0_loss_past_trajs_1": 0.0, "track.frame_0_loss_cls_2": 0.63057, "track.frame_0_loss_bbox_2": 1.58309, "track.frame_0_loss_past_trajs_2": 0.0, "track.frame_0_loss_cls_3": 0.6289, "track.frame_0_loss_bbox_3": 1.55975, "track.frame_0_loss_past_trajs_3": 0.0, "track.frame_0_loss_cls_4": 0.64581, "track.frame_0_loss_bbox_4": 1.5312, "track.frame_0_loss_past_trajs_4": 0.0, "track.frame_0_loss_cls_5": 0.64221, "track.frame_0_loss_bbox_5": 1.52175, "track.frame_0_loss_past_trajs_5": 0.0, "track.frame_1_loss_cls_0": 0.6434, "track.frame_1_loss_bbox_0": 1.58059, "track.frame_1_loss_past_trajs_0": 0.0, "track.frame_1_loss_cls_1": 0.63414, "track.frame_1_loss_bbox_1": 1.43451, "track.frame_1_loss_past_trajs_1": 0.0, "track.frame_1_loss_cls_2": 0.63502, "track.frame_1_loss_bbox_2": 1.37406, "track.frame_1_loss_past_trajs_2": 0.0, "track.frame_1_loss_cls_3": 0.63599, "track.frame_1_loss_bbox_3": 1.35327, "track.frame_1_loss_past_trajs_3": 0.0, "track.frame_1_loss_cls_4": 0.63936, "track.frame_1_loss_bbox_4": 1.31426, "track.frame_1_loss_past_trajs_4": 0.0, "track.frame_1_loss_cls_5": 0.64581, "track.frame_1_loss_bbox_5": 1.29684, "track.frame_1_loss_past_trajs_5": 0.0, "track.frame_2_loss_cls_0": 0.6349, "track.frame_2_loss_bbox_0": 1.68499, "track.frame_2_loss_past_trajs_0": 0.0, "track.frame_2_loss_cls_1": 0.62502, "track.frame_2_loss_bbox_1": 1.52076, "track.frame_2_loss_past_trajs_1": 0.0, "track.frame_2_loss_cls_2": 0.63614, "track.frame_2_loss_bbox_2": 1.45687, "track.frame_2_loss_past_trajs_2": 0.0, "track.frame_2_loss_cls_3": 0.6348, "track.frame_2_loss_bbox_3": 1.42776, "track.frame_2_loss_past_trajs_3": 0.0, "track.frame_2_loss_cls_4": 0.64286, "track.frame_2_loss_bbox_4": 1.40921, "track.frame_2_loss_past_trajs_4": 0.0, "track.frame_2_loss_cls_5": 0.66275, "track.frame_2_loss_bbox_5": 1.39285, "track.frame_2_loss_past_trajs_5": 0.0, "track.frame_3_loss_cls_0": 0.62446, "track.frame_3_loss_bbox_0": 1.57177, "track.frame_3_loss_past_trajs_0": 0.0, "track.frame_3_loss_cls_1": 0.6203, "track.frame_3_loss_bbox_1": 1.46496, "track.frame_3_loss_past_trajs_1": 0.0, "track.frame_3_loss_cls_2": 0.64695, "track.frame_3_loss_bbox_2": 1.40761, "track.frame_3_loss_past_trajs_2": 0.0, "track.frame_3_loss_cls_3": 0.67104, "track.frame_3_loss_bbox_3": 1.38387, "track.frame_3_loss_past_trajs_3": 0.0, "track.frame_3_loss_cls_4": 0.67564, "track.frame_3_loss_bbox_4": 1.37999, "track.frame_3_loss_past_trajs_4": 0.0, "track.frame_3_loss_cls_5": 0.67016, "track.frame_3_loss_bbox_5": 1.37754, "track.frame_3_loss_past_trajs_5": 0.0, "track.frame_4_loss_cls_0": 0.65545, "track.frame_4_loss_bbox_0": 1.65743, "track.frame_4_loss_past_trajs_0": 0.0, "track.frame_4_loss_cls_1": 0.625, "track.frame_4_loss_bbox_1": 1.54608, "track.frame_4_loss_past_trajs_1": 0.0, "track.frame_4_loss_cls_2": 0.63774, "track.frame_4_loss_bbox_2": 1.49198, "track.frame_4_loss_past_trajs_2": 0.0, "track.frame_4_loss_cls_3": 0.65978, "track.frame_4_loss_bbox_3": 1.47076, "track.frame_4_loss_past_trajs_3": 0.0, "track.frame_4_loss_cls_4": 0.66147, "track.frame_4_loss_bbox_4": 1.45586, "track.frame_4_loss_past_trajs_4": 0.0, "track.frame_4_loss_cls_5": 0.66961, "track.frame_4_loss_bbox_5": 1.43767, "track.frame_4_loss_past_trajs_5": 0.0, "map.loss_cls": 0.96166, "map.loss_bbox": 2.02588, "map.loss_iou": 1.87285, "map.loss_mask_things": 1.66098, "map.loss_mask_stuff": 0.0831, "map.d0.loss_mask_things_f": 1.69108, "map.d0.loss_iou_f": 0.0, "map.d0.loss_bbox_f": 0.0, "map.d0.loss_cls_f": 0.0, "map.d1.loss_mask_things_f": 1.68139, "map.d1.loss_iou_f": 0.0, "map.d1.loss_bbox_f": 0.0, "map.d1.loss_cls_f": 0.0, "map.d2.loss_mask_things_f": 1.66578, "map.d2.loss_iou_f": 0.0, "map.d2.loss_bbox_f": 0.0, "map.d2.loss_cls_f": 0.0, "map.d3.loss_mask_things_f": 1.69615, "map.d3.loss_iou_f": 0.0, "map.d3.loss_bbox_f": 0.0, "map.d3.loss_cls_f": 0.0, "map.d0.loss_mask_stuff_f": 0.08117, "map.d0.loss_cls_stuff_f": 0.0002, "map.d1.loss_mask_stuff_f": 0.07172, "map.d1.loss_cls_stuff_f": 0.00022, "map.d2.loss_mask_stuff_f": 0.07091, "map.d2.loss_cls_stuff_f": 0.0002, "map.d3.loss_mask_stuff_f": 0.08159, "map.d3.loss_cls_stuff_f": 0.00024, "map.d4.loss_mask_stuff_f": 0.06698, "map.d4.loss_cls_stuff_f": 0.00025, "map.d5.loss_mask_stuff_f": 0.0786, "map.d5.loss_cls_stuff_f": 0.00028, "map.d0.loss_cls": 0.99254, "map.d0.loss_bbox": 2.07429, "map.d0.loss_iou": 1.91315, "map.d1.loss_cls": 0.87249, "map.d1.loss_bbox": 2.05309, "map.d1.loss_iou": 1.89758, "map.d2.loss_cls": 0.93207, "map.d2.loss_bbox": 2.0332, "map.d2.loss_iou": 1.88247, "map.d3.loss_cls": 0.96709, "map.d3.loss_bbox": 2.02707, "map.d3.loss_iou": 1.87673, "map.d4.loss_cls": 0.96975, "map.d4.loss_bbox": 2.02702, "map.d4.loss_iou": 1.87697, "loss": 101.96853, "grad_norm": 415.07007, "time": 15.87928}
